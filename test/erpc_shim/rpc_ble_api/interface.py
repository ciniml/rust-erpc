#
# Generated by erpcgen 1.8.0 on Thu Oct 22 01:33:52 2020.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc

# Abstract base class for rpc_ble_host
class Irpc_ble_host(object):
    SERVICE_ID = 1
    RPC_BLE_INIT_ID = 1
    RPC_BLE_START_ID = 2
    RPC_BLE_DEINIT_ID = 3

    def rpc_ble_init(self):
        raise NotImplementedError()

    def rpc_ble_start(self):
        raise NotImplementedError()

    def rpc_ble_deinit(self):
        raise NotImplementedError()


# Abstract base class for rpc_gap
class Irpc_gap(object):
    SERVICE_ID = 2
    RPC_GAP_SET_PARAM_ID = 1
    RPC_GAP_GET_PARAM_ID = 2
    RPC_GAP_SET_PAIRABLE_MODE_ID = 3

    def rpc_gap_set_param(self, param, value):
        raise NotImplementedError()

    def rpc_gap_get_param(self, param, value):
        raise NotImplementedError()

    def rpc_gap_set_pairable_mode(self):
        raise NotImplementedError()


# Abstract base class for rpc_gap_bone
class Irpc_gap_bone(object):
    SERVICE_ID = 3
    RPC_LE_BOND_SET_PARAM_ID = 1
    RPC_LE_BOND_GET_PARAM_ID = 2
    RPC_LE_BOND_PAIR_ID = 3
    RPC_LE_BOND_GET_DISPLAY_KEY_ID = 4
    RPC_LE_BOND_PASSKEY_INPUT_CONFIRM_ID = 5
    RPC_LE_BOND_OOB_INPUT_CONFIRM_ID = 6
    RPC_LE_BOND_JUST_WORK_CONFIRM_ID = 7
    RPC_LE_BOND_PASSKEY_DISPLAY_CONFIRM_ID = 8
    RPC_LE_BOND_USER_CONFIRM_ID = 9
    RPC_LE_BOND_CFG_LOCAL_KEY_DISTRIBUTE_ID = 10
    RPC_LE_BOND_CLEAR_ALL_KEYS_ID = 11
    RPC_LE_BOND_DELETE_BY_IDX_ID = 12
    RPC_LE_BOND_DELETE_BY_BD_ID = 13
    RPC_LE_BOND_GET_SEC_LEVEL_ID = 14

    def rpc_le_bond_set_param(self, param, value):
        raise NotImplementedError()

    def rpc_le_bond_get_param(self, param, value):
        raise NotImplementedError()

    def rpc_le_bond_pair(self, conn_id):
        raise NotImplementedError()

    def rpc_le_bond_get_display_key(self, conn_id, key):
        raise NotImplementedError()

    def rpc_le_bond_passkey_input_confirm(self, conn_id, passcode, cause):
        raise NotImplementedError()

    def rpc_le_bond_oob_input_confirm(self, conn_id, cause):
        raise NotImplementedError()

    def rpc_le_bond_just_work_confirm(self, conn_id, cause):
        raise NotImplementedError()

    def rpc_le_bond_passkey_display_confirm(self, conn_id, cause):
        raise NotImplementedError()

    def rpc_le_bond_user_confirm(self, conn_id, cause):
        raise NotImplementedError()

    def rpc_le_bond_cfg_local_key_distribute(self, init_dist, rsp_dist):
        raise NotImplementedError()

    def rpc_le_bond_clear_all_keys(self):
        raise NotImplementedError()

    def rpc_le_bond_delete_by_idx(self, idx):
        raise NotImplementedError()

    def rpc_le_bond_delete_by_bd(self, bd_addr, bd_type):
        raise NotImplementedError()

    def rpc_le_bond_get_sec_level(self, conn_id, sec_type):
        raise NotImplementedError()


# Abstract base class for rpc_gap_le
class Irpc_gap_le(object):
    SERVICE_ID = 4
    RPC_LE_GAP_INIT_ID = 1
    RPC_LE_GAP_MSG_INFO_WAY_ID = 2
    RPC_LE_GET_MAX_LINK_NUM_ID = 3
    RPC_LE_SET_GAP_PARAM_ID = 4
    RPC_LE_GET_GAP_PARAM_ID = 5
    RPC_LE_MODIFY_WHITE_LIST_ID = 6
    RPC_LE_GEN_RAND_ADDR_ID = 7
    RPC_LE_SET_RAND_ADDR_ID = 8
    RPC_LE_CFG_LOCAL_IDENTITY_ADDRESS_ID = 9
    RPC_LE_SET_HOST_CHANN_CLASSIF_ID = 10
    RPC_LE_WRITE_DEFAULT_DATA_LEN_ID = 11

    def rpc_le_gap_init(self, link_num):
        raise NotImplementedError()

    def rpc_le_gap_msg_info_way(self, use_msg):
        raise NotImplementedError()

    def rpc_le_get_max_link_num(self):
        raise NotImplementedError()

    def rpc_le_set_gap_param(self, param, value):
        raise NotImplementedError()

    def rpc_le_get_gap_param(self, param, value):
        raise NotImplementedError()

    def rpc_le_modify_white_list(self, operation, bd_addr, bd_type):
        raise NotImplementedError()

    def rpc_le_gen_rand_addr(self, rand_addr_type, random_bd):
        raise NotImplementedError()

    def rpc_le_set_rand_addr(self, random_bd):
        raise NotImplementedError()

    def rpc_le_cfg_local_identity_address(self, addr, ident_addr_type):
        raise NotImplementedError()

    def rpc_le_set_host_chann_classif(self, p_channel_map):
        raise NotImplementedError()

    def rpc_le_write_default_data_len(self, tx_octets, tx_time):
        raise NotImplementedError()


# Abstract base class for rpc_gap_config
class Irpc_gap_config(object):
    SERVICE_ID = 5
    RPC_GAP_CONFIG_CCCD_NOT_CHECK_ID = 1
    RPC_GAP_CONFIG_CCC_BITS_COUNT_ID = 2
    RPC_GAP_CONFIG_MAX_ATTRIBUTE_TABLE_COUNT_ID = 3
    RPC_GAP_CONFIG_MAX_MTU_SIZE_ID = 4
    RPC_GAP_CONFIG_BTE_POOL_SIZE_ID = 5
    RPC_GAP_CONFIG_BT_REPORT_BUF_NUM_ID = 6
    RPC_GAP_CONFIG_LE_KEY_STORAGE_FLAG_ID = 7
    RPC_GAP_CONFIG_MAX_LE_PAIRED_DEVICE_ID = 8
    RPC_GAP_CONFIG_MAX_LE_LINK_NUM_ID = 9

    def rpc_gap_config_cccd_not_check(self, cccd_not_check_flag):
        raise NotImplementedError()

    def rpc_gap_config_ccc_bits_count(self, gatt_server_ccc_bits_count, gatt_storage_ccc_bits_count):
        raise NotImplementedError()

    def rpc_gap_config_max_attribute_table_count(self, gatt_max_attribute_table_count):
        raise NotImplementedError()

    def rpc_gap_config_max_mtu_size(self, att_max_mtu_size):
        raise NotImplementedError()

    def rpc_gap_config_bte_pool_size(self, bte_pool_size):
        raise NotImplementedError()

    def rpc_gap_config_bt_report_buf_num(self, bt_report_buf_num):
        raise NotImplementedError()

    def rpc_gap_config_le_key_storage_flag(self, le_key_storage_flag):
        raise NotImplementedError()

    def rpc_gap_config_max_le_paired_device(self, max_le_paired_device):
        raise NotImplementedError()

    def rpc_gap_config_max_le_link_num(self, le_link_num):
        raise NotImplementedError()


# Abstract base class for rpc_gap_adv
class Irpc_gap_adv(object):
    SERVICE_ID = 6
    RPC_LE_ADV_SET_PARAM_ID = 1
    RPC_LE_ADV_GET_PARAM_ID = 2
    RPC_LE_ADV_START_ID = 3
    RPC_LE_ADV_STOP_ID = 4
    RPC_LE_ADV_UPDATE_PARAM_ID = 5

    def rpc_le_adv_set_param(self, param, value):
        raise NotImplementedError()

    def rpc_le_adv_get_param(self, param, value):
        raise NotImplementedError()

    def rpc_le_adv_start(self):
        raise NotImplementedError()

    def rpc_le_adv_stop(self):
        raise NotImplementedError()

    def rpc_le_adv_update_param(self):
        raise NotImplementedError()


# Abstract base class for rpc_gap_scan
class Irpc_gap_scan(object):
    SERVICE_ID = 7
    RPC_LE_SCAN_SET_PARAM_ID = 1
    RPC_LE_SCAN_GET_PARAM_ID = 2
    RPC_LE_SCAN_START_ID = 3
    RPC_LE_SCAN_TIMER_START_ID = 4
    RPC_LE_SCAN_STOP_ID = 5
    RPC_LE_SCAN_INFO_FILTER_ID = 6

    def rpc_le_scan_set_param(self, param, value):
        raise NotImplementedError()

    def rpc_le_scan_get_param(self, param, value):
        raise NotImplementedError()

    def rpc_le_scan_start(self):
        raise NotImplementedError()

    def rpc_le_scan_timer_start(self, tick):
        raise NotImplementedError()

    def rpc_le_scan_stop(self):
        raise NotImplementedError()

    def rpc_le_scan_info_filter(self, enable, offset, len, p_filter):
        raise NotImplementedError()


# Abstract base class for rpc_gap_conn
class Irpc_gap_conn(object):
    SERVICE_ID = 8
    RPC_LE_GET_CONN_PARAM_ID = 1
    RPC_LE_GET_CONN_INFO_ID = 2
    RPC_LE_GET_CONN_ADDR_ID = 3
    RPC_LE_GET_CONN_ID_ID = 4
    RPC_LE_GET_ACTIVE_LINK_NUM_ID = 5
    RPC_LE_GET_IDLE_LINK_NUM_ID = 6
    RPC_LE_DISCONNECT_ID = 7
    RPC_LE_READ_RSSI_ID = 8
    RPC_LE_SET_DATA_LEN_ID = 9
    RPC_LE_SET_PHY_ID = 10
    RPC_LE_SET_CONN_PARAM_ID = 11
    RPC_LE_CONNECT_ID = 12
    RPC_LE_UPDATE_CONN_PARAM_ID = 13

    def rpc_le_get_conn_param(self, param, value, conn_id):
        raise NotImplementedError()

    def rpc_le_get_conn_info(self, conn_id, p_conn_info):
        raise NotImplementedError()

    def rpc_le_get_conn_addr(self, conn_id, bd_addr, bd_type):
        raise NotImplementedError()

    def rpc_le_get_conn_id(self, bd_addr, bd_type, p_conn_id):
        raise NotImplementedError()

    def rpc_le_get_active_link_num(self):
        raise NotImplementedError()

    def rpc_le_get_idle_link_num(self):
        raise NotImplementedError()

    def rpc_le_disconnect(self, conn_id):
        raise NotImplementedError()

    def rpc_le_read_rssi(self, conn_id):
        raise NotImplementedError()

    def rpc_le_set_data_len(self, conn_id, tx_octets, tx_time):
        raise NotImplementedError()

    def rpc_le_set_phy(self, conn_id, all_phys, tx_phys, rx_phys, phy_options):
        raise NotImplementedError()

    def rpc_le_set_conn_param(self, conn_type, p_conn_param):
        raise NotImplementedError()

    def rpc_le_connect(self, init_phys, remote_bd, remote_bd_type, local_bd_type, scan_timeout):
        raise NotImplementedError()

    def rpc_le_update_conn_param(self, conn_id, conn_interval_min, conn_interval_max, conn_latency, supervision_timeout, ce_length_min, ce_length_max):
        raise NotImplementedError()


# Abstract base class for rpc_gap_storage
class Irpc_gap_storage(object):
    SERVICE_ID = 9
    RPC_FLASH_SAVE_LOCAL_NAME_ID = 1
    RPC_FLASH_LOAD_LOCAL_NAME_ID = 2
    RPC_FLASH_SAVE_LOCAL_APPEARANCE_ID = 3
    RPC_FLASH_LOAD_LOCAL_APPEARANCE_ID = 4
    RPC_LE_FIND_KEY_ENTRY_ID = 5
    RPC_LE_FIND_KEY_ENTRY_BY_IDX_ID = 6
    RPC_LE_GET_BOND_DEV_NUM_ID = 7
    RPC_LE_GET_LOW_PRIORITY_BOND_ID = 8
    RPC_LE_GET_HIGH_PRIORITY_BOND_ID = 9
    RPC_LE_SET_HIGH_PRIORITY_BOND_ID = 10
    RPC_LE_RESOLVE_RANDOM_ADDRESS_ID = 11
    RPC_LE_GET_CCCD_DATA_ID = 12
    RPC_LE_GEN_BOND_DEV_ID = 13
    RPC_LE_GET_DEV_BOND_INFO_LEN_ID = 14
    RPC_LE_SET_DEV_BOND_INFO_ID = 15
    RPC_LE_GET_DEV_BOND_INFO_ID = 16

    def rpc_flash_save_local_name(self, p_data):
        raise NotImplementedError()

    def rpc_flash_load_local_name(self, p_data):
        raise NotImplementedError()

    def rpc_flash_save_local_appearance(self, p_data):
        raise NotImplementedError()

    def rpc_flash_load_local_appearance(self, p_data):
        raise NotImplementedError()

    def rpc_le_find_key_entry(self, bd_addr, bd_type):
        raise NotImplementedError()

    def rpc_le_find_key_entry_by_idx(self, idx):
        raise NotImplementedError()

    def rpc_le_get_bond_dev_num(self):
        raise NotImplementedError()

    def rpc_le_get_low_priority_bond(self):
        raise NotImplementedError()

    def rpc_le_get_high_priority_bond(self):
        raise NotImplementedError()

    def rpc_le_set_high_priority_bond(self, bd_addr, bd_type):
        raise NotImplementedError()

    def rpc_le_resolve_random_address(self, unresolved_addr, resolved_addr, resolved_addr_type):
        raise NotImplementedError()

    def rpc_le_get_cccd_data(self, p_entry, p_data):
        raise NotImplementedError()

    def rpc_le_gen_bond_dev(self, bd_addr, bd_type, local_bd_type, local_ltk, key_type, p_cccd):
        raise NotImplementedError()

    def rpc_le_get_dev_bond_info_len(self):
        raise NotImplementedError()

    def rpc_le_set_dev_bond_info(self, p_data, exist):
        raise NotImplementedError()

    def rpc_le_get_dev_bond_info(self, p_entry, p_data):
        raise NotImplementedError()


# Abstract base class for rpc_gatt_client
class Irpc_gatt_client(object):
    SERVICE_ID = 10
    RPC_BLE_CLIENT_INIT_ID = 1
    RPC_BLE_ADD_CLIENT_ID = 2
    RPC_CLIENT_INIT_ID = 3
    RPC_CLIENT_ALL_PRIMARY_SRV_DISCOVERY_ID = 4
    RPC_CLIENT_BY_UUID_SRV_DISCOVERY_ID = 5
    RPC_CLIENT_BY_UUID128_SRV_DISCOVERY_ID = 6
    RPC_CLIENT_RELATIONSHIP_DISCOVERY_ID = 7
    RPC_CLIENT_ALL_CHAR_DISCOVERY_ID = 8
    RPC_CLIENT_BY_UUID_CHAR_DISCOVERY_ID = 9
    RPC_CLIENT_BY_UUID128_CHAR_DISCOVERY_ID = 10
    RPC_CLIENT_ALL_CHAR_DESCRIPTOR_DISCOVERY_ID = 11
    RPC_CLIENT_ATTR_READ_ID = 12
    RPC_CLIENT_ATTR_READ_USING_UUID_ID = 13
    RPC_CLIENT_ATTR_WRITE_ID = 14
    RPC_CLIENT_ATTR_IND_CONFIRM_ID = 15

    def rpc_ble_client_init(self, num):
        raise NotImplementedError()

    def rpc_ble_add_client(self, app_id, link_num):
        raise NotImplementedError()

    def rpc_client_init(self, client_num):
        raise NotImplementedError()

    def rpc_client_all_primary_srv_discovery(self, conn_id, client_id):
        raise NotImplementedError()

    def rpc_client_by_uuid_srv_discovery(self, conn_id, client_id, uuid16):
        raise NotImplementedError()

    def rpc_client_by_uuid128_srv_discovery(self, conn_id, client_id, p_uuid128):
        raise NotImplementedError()

    def rpc_client_relationship_discovery(self, conn_id, client_id, start_handle, end_handle):
        raise NotImplementedError()

    def rpc_client_all_char_discovery(self, conn_id, client_id, start_handle, end_handle):
        raise NotImplementedError()

    def rpc_client_by_uuid_char_discovery(self, conn_id, client_id, start_handle, end_handle, uuid16):
        raise NotImplementedError()

    def rpc_client_by_uuid128_char_discovery(self, conn_id, client_id, start_handle, end_handle, p_uuid128):
        raise NotImplementedError()

    def rpc_client_all_char_descriptor_discovery(self, conn_id, client_id, start_handle, end_handle):
        raise NotImplementedError()

    def rpc_client_attr_read(self, conn_id, client_id, handle):
        raise NotImplementedError()

    def rpc_client_attr_read_using_uuid(self, conn_id, client_id, start_handle, end_handle, uuid16, p_uuid128):
        raise NotImplementedError()

    def rpc_client_attr_write(self, conn_id, client_id, write_type, handle, data):
        raise NotImplementedError()

    def rpc_client_attr_ind_confirm(self, conn_id):
        raise NotImplementedError()


# Abstract base class for rpc_gatt_server
class Irpc_gatt_server(object):
    SERVICE_ID = 11
    RPC_BLE_SERVER_INIT_ID = 1
    RPC_BLE_CREATE_SERVICE_ID = 2
    RPC_BLE_DELETE_SERVICE_ID = 3
    RPC_BLE_SERVICE_START_ID = 4
    RPC_BLE_GET_SERVIE_HANDLE_ID = 5
    RPC_BLE_CREATE_CHAR_ID = 6
    RPC_BLE_CREATE_DESC_ID = 7
    RPC_SERVER_SEND_DATA_ID = 8
    RPC_BLE_SERVER_GET_ATTR_VALUE_ID = 9
    RPC_SERVER_EXEC_WRITE_CONFIRM_ID = 10
    RPC_SERVER_ATTR_WRITE_CONFIRM_ID = 11
    RPC_SERVER_ATTR_READ_CONFIRM_ID = 12

    def rpc_ble_server_init(self, num):
        raise NotImplementedError()

    def rpc_ble_create_service(self, uuid, uuid_length, is_primary):
        raise NotImplementedError()

    def rpc_ble_delete_service(self, app_id):
        raise NotImplementedError()

    def rpc_ble_service_start(self, app_id):
        raise NotImplementedError()

    def rpc_ble_get_servie_handle(self, app_id):
        raise NotImplementedError()

    def rpc_ble_create_char(self, app_id, uuid, uuid_length, properties, permissions):
        raise NotImplementedError()

    def rpc_ble_create_desc(self, app_id, char_handle, uuid, uuid_length, flags, permissions, value_length, p_value):
        raise NotImplementedError()

    def rpc_server_send_data(self, conn_id, service_id, attrib_index, data, pdu_type):
        raise NotImplementedError()

    def rpc_ble_server_get_attr_value(self, app_id, attr_handle):
        raise NotImplementedError()

    def rpc_server_exec_write_confirm(self, conn_id, cause, handle):
        raise NotImplementedError()

    def rpc_server_attr_write_confirm(self, conn_id, service_id, attrib_index, cause):
        raise NotImplementedError()

    def rpc_server_attr_read_confirm(self, conn_id, service_id, attrib_index, data, cause):
        raise NotImplementedError()


