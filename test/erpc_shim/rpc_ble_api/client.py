#
# Generated by erpcgen 1.8.0 on Thu Oct 22 01:33:52 2020.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface
# import callbacks declaration from other groups
from ..rpc_ble_callback import interface as interface_ble_callback

# Client for rpc_ble_host
class rpc_ble_hostClient(interface.Irpc_ble_host):
    def __init__(self, manager):
        super(rpc_ble_hostClient, self).__init__()
        self._clientManager = manager

    def rpc_ble_init(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_BLE_INIT_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def rpc_ble_start(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_BLE_START_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_ble_deinit(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_BLE_DEINIT_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)


# Client for rpc_gap
class rpc_gapClient(interface.Irpc_gap):
    def __init__(self, manager):
        super(rpc_gapClient, self).__init__()
        self._clientManager = manager

    def rpc_gap_set_param(self, param, value):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_GAP_SET_PARAM_ID,
                sequence=request.sequence))
        if param is None:
            raise ValueError("param is None")
        codec.write_uint32(param)
        if value is None:
            raise ValueError("value is None")
        codec.write_binary(value)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_gap_get_param(self, param, value):
        assert type(value) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_GAP_GET_PARAM_ID,
                sequence=request.sequence))
        if param is None:
            raise ValueError("param is None")
        codec.write_uint32(param)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        value.value = codec.read_binary()
        _result = codec.read_uint32()
        return _result

    def rpc_gap_set_pairable_mode(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_GAP_SET_PAIRABLE_MODE_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result


# Client for rpc_gap_bone
class rpc_gap_boneClient(interface.Irpc_gap_bone):
    def __init__(self, manager):
        super(rpc_gap_boneClient, self).__init__()
        self._clientManager = manager

    def rpc_le_bond_set_param(self, param, value):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_BOND_SET_PARAM_ID,
                sequence=request.sequence))
        if param is None:
            raise ValueError("param is None")
        codec.write_uint32(param)
        if value is None:
            raise ValueError("value is None")
        codec.write_binary(value)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_bond_get_param(self, param, value):
        assert type(value) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_BOND_GET_PARAM_ID,
                sequence=request.sequence))
        if param is None:
            raise ValueError("param is None")
        codec.write_uint32(param)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        value.value = codec.read_binary()
        _result = codec.read_uint32()
        return _result

    def rpc_le_bond_pair(self, conn_id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_BOND_PAIR_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_bond_get_display_key(self, conn_id, key):
        assert type(key) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_BOND_GET_DISPLAY_KEY_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        key.value = codec.read_uint32()
        _result = codec.read_uint32()
        return _result

    def rpc_le_bond_passkey_input_confirm(self, conn_id, passcode, cause):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_BOND_PASSKEY_INPUT_CONFIRM_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if passcode is None:
            raise ValueError("passcode is None")
        codec.write_uint32(passcode)
        if cause is None:
            raise ValueError("cause is None")
        codec.write_uint32(cause)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_bond_oob_input_confirm(self, conn_id, cause):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_BOND_OOB_INPUT_CONFIRM_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if cause is None:
            raise ValueError("cause is None")
        codec.write_uint32(cause)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_bond_just_work_confirm(self, conn_id, cause):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_BOND_JUST_WORK_CONFIRM_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if cause is None:
            raise ValueError("cause is None")
        codec.write_uint32(cause)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_bond_passkey_display_confirm(self, conn_id, cause):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_BOND_PASSKEY_DISPLAY_CONFIRM_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if cause is None:
            raise ValueError("cause is None")
        codec.write_uint32(cause)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_bond_user_confirm(self, conn_id, cause):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_BOND_USER_CONFIRM_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if cause is None:
            raise ValueError("cause is None")
        codec.write_uint32(cause)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_bond_cfg_local_key_distribute(self, init_dist, rsp_dist):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_BOND_CFG_LOCAL_KEY_DISTRIBUTE_ID,
                sequence=request.sequence))
        if init_dist is None:
            raise ValueError("init_dist is None")
        codec.write_uint8(init_dist)
        if rsp_dist is None:
            raise ValueError("rsp_dist is None")
        codec.write_uint8(rsp_dist)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_bond_clear_all_keys(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_BOND_CLEAR_ALL_KEYS_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_le_bond_delete_by_idx(self, idx):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_BOND_DELETE_BY_IDX_ID,
                sequence=request.sequence))
        if idx is None:
            raise ValueError("idx is None")
        codec.write_uint8(idx)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_bond_delete_by_bd(self, bd_addr, bd_type):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_BOND_DELETE_BY_BD_ID,
                sequence=request.sequence))
        if bd_addr is None:
            raise ValueError("bd_addr is None")
        for _i0 in bd_addr:
            codec.write_uint8(_i0)

        if bd_type is None:
            raise ValueError("bd_type is None")
        codec.write_uint32(bd_type)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_bond_get_sec_level(self, conn_id, sec_type):
        assert type(sec_type) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_BOND_GET_SEC_LEVEL_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        sec_type.value = codec.read_uint32()
        _result = codec.read_uint32()
        return _result


# Client for rpc_gap_le
class rpc_gap_leClient(interface.Irpc_gap_le):
    def __init__(self, manager):
        super(rpc_gap_leClient, self).__init__()
        self._clientManager = manager

    def rpc_le_gap_init(self, link_num):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GAP_INIT_ID,
                sequence=request.sequence))
        if link_num is None:
            raise ValueError("link_num is None")
        codec.write_uint8(link_num)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def rpc_le_gap_msg_info_way(self, use_msg):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GAP_MSG_INFO_WAY_ID,
                sequence=request.sequence))
        if use_msg is None:
            raise ValueError("use_msg is None")
        codec.write_bool(use_msg)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_le_get_max_link_num(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GET_MAX_LINK_NUM_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint8()
        return _result

    def rpc_le_set_gap_param(self, param, value):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_SET_GAP_PARAM_ID,
                sequence=request.sequence))
        if param is None:
            raise ValueError("param is None")
        codec.write_uint32(param)
        if value is None:
            raise ValueError("value is None")
        codec.write_binary(value)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_get_gap_param(self, param, value):
        assert type(value) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GET_GAP_PARAM_ID,
                sequence=request.sequence))
        if param is None:
            raise ValueError("param is None")
        codec.write_uint32(param)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        value.value = codec.read_binary()
        _result = codec.read_uint32()
        return _result

    def rpc_le_modify_white_list(self, operation, bd_addr, bd_type):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_MODIFY_WHITE_LIST_ID,
                sequence=request.sequence))
        if operation is None:
            raise ValueError("operation is None")
        codec.write_uint32(operation)
        if bd_addr is None:
            raise ValueError("bd_addr is None")
        for _i0 in bd_addr:
            codec.write_uint8(_i0)

        if bd_type is None:
            raise ValueError("bd_type is None")
        codec.write_uint32(bd_type)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_gen_rand_addr(self, rand_addr_type, random_bd):
        assert type(random_bd) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GEN_RAND_ADDR_ID,
                sequence=request.sequence))
        if rand_addr_type is None:
            raise ValueError("rand_addr_type is None")
        codec.write_uint32(rand_addr_type)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        random_bd.value = []
        for _i0 in range(6):
            _v0 = codec.read_uint8()
            random_bd.value.append(_v0)

        _result = codec.read_uint32()
        return _result

    def rpc_le_set_rand_addr(self, random_bd):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_SET_RAND_ADDR_ID,
                sequence=request.sequence))
        if random_bd is None:
            raise ValueError("random_bd is None")
        for _i0 in random_bd:
            codec.write_uint8(_i0)


        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_cfg_local_identity_address(self, addr, ident_addr_type):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_CFG_LOCAL_IDENTITY_ADDRESS_ID,
                sequence=request.sequence))
        if addr is None:
            raise ValueError("addr is None")
        for _i0 in addr:
            codec.write_uint8(_i0)

        if ident_addr_type is None:
            raise ValueError("ident_addr_type is None")
        codec.write_uint32(ident_addr_type)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_set_host_chann_classif(self, p_channel_map):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_SET_HOST_CHANN_CLASSIF_ID,
                sequence=request.sequence))
        if p_channel_map is None:
            raise ValueError("p_channel_map is None")
        codec.write_uint8(p_channel_map)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_write_default_data_len(self, tx_octets, tx_time):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_WRITE_DEFAULT_DATA_LEN_ID,
                sequence=request.sequence))
        if tx_octets is None:
            raise ValueError("tx_octets is None")
        codec.write_uint16(tx_octets)
        if tx_time is None:
            raise ValueError("tx_time is None")
        codec.write_uint16(tx_time)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result


# Client for rpc_gap_config
class rpc_gap_configClient(interface.Irpc_gap_config):
    def __init__(self, manager):
        super(rpc_gap_configClient, self).__init__()
        self._clientManager = manager

    def rpc_gap_config_cccd_not_check(self, cccd_not_check_flag):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_GAP_CONFIG_CCCD_NOT_CHECK_ID,
                sequence=request.sequence))
        if cccd_not_check_flag is None:
            raise ValueError("cccd_not_check_flag is None")
        codec.write_uint32(cccd_not_check_flag)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_gap_config_ccc_bits_count(self, gatt_server_ccc_bits_count, gatt_storage_ccc_bits_count):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_GAP_CONFIG_CCC_BITS_COUNT_ID,
                sequence=request.sequence))
        if gatt_server_ccc_bits_count is None:
            raise ValueError("gatt_server_ccc_bits_count is None")
        codec.write_uint8(gatt_server_ccc_bits_count)
        if gatt_storage_ccc_bits_count is None:
            raise ValueError("gatt_storage_ccc_bits_count is None")
        codec.write_uint8(gatt_storage_ccc_bits_count)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_gap_config_max_attribute_table_count(self, gatt_max_attribute_table_count):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_GAP_CONFIG_MAX_ATTRIBUTE_TABLE_COUNT_ID,
                sequence=request.sequence))
        if gatt_max_attribute_table_count is None:
            raise ValueError("gatt_max_attribute_table_count is None")
        codec.write_uint8(gatt_max_attribute_table_count)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_gap_config_max_mtu_size(self, att_max_mtu_size):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_GAP_CONFIG_MAX_MTU_SIZE_ID,
                sequence=request.sequence))
        if att_max_mtu_size is None:
            raise ValueError("att_max_mtu_size is None")
        codec.write_uint16(att_max_mtu_size)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_gap_config_bte_pool_size(self, bte_pool_size):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_GAP_CONFIG_BTE_POOL_SIZE_ID,
                sequence=request.sequence))
        if bte_pool_size is None:
            raise ValueError("bte_pool_size is None")
        codec.write_uint8(bte_pool_size)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_gap_config_bt_report_buf_num(self, bt_report_buf_num):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_GAP_CONFIG_BT_REPORT_BUF_NUM_ID,
                sequence=request.sequence))
        if bt_report_buf_num is None:
            raise ValueError("bt_report_buf_num is None")
        codec.write_uint8(bt_report_buf_num)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_gap_config_le_key_storage_flag(self, le_key_storage_flag):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_GAP_CONFIG_LE_KEY_STORAGE_FLAG_ID,
                sequence=request.sequence))
        if le_key_storage_flag is None:
            raise ValueError("le_key_storage_flag is None")
        codec.write_uint16(le_key_storage_flag)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_gap_config_max_le_paired_device(self, max_le_paired_device):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_GAP_CONFIG_MAX_LE_PAIRED_DEVICE_ID,
                sequence=request.sequence))
        if max_le_paired_device is None:
            raise ValueError("max_le_paired_device is None")
        codec.write_uint8(max_le_paired_device)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_gap_config_max_le_link_num(self, le_link_num):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_GAP_CONFIG_MAX_LE_LINK_NUM_ID,
                sequence=request.sequence))
        if le_link_num is None:
            raise ValueError("le_link_num is None")
        codec.write_uint8(le_link_num)

        # Send request and process reply.
        self._clientManager.perform_request(request)


# Client for rpc_gap_adv
class rpc_gap_advClient(interface.Irpc_gap_adv):
    def __init__(self, manager):
        super(rpc_gap_advClient, self).__init__()
        self._clientManager = manager

    def rpc_le_adv_set_param(self, param, value):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_ADV_SET_PARAM_ID,
                sequence=request.sequence))
        if param is None:
            raise ValueError("param is None")
        codec.write_uint32(param)
        if value is None:
            raise ValueError("value is None")
        codec.write_binary(value)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_adv_get_param(self, param, value):
        assert type(value) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_ADV_GET_PARAM_ID,
                sequence=request.sequence))
        if param is None:
            raise ValueError("param is None")
        codec.write_uint32(param)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        value.value = codec.read_binary()
        _result = codec.read_uint32()
        return _result

    def rpc_le_adv_start(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_ADV_START_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_adv_stop(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_ADV_STOP_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_adv_update_param(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_ADV_UPDATE_PARAM_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result


# Client for rpc_gap_scan
class rpc_gap_scanClient(interface.Irpc_gap_scan):
    def __init__(self, manager):
        super(rpc_gap_scanClient, self).__init__()
        self._clientManager = manager

    def rpc_le_scan_set_param(self, param, value):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_SCAN_SET_PARAM_ID,
                sequence=request.sequence))
        if param is None:
            raise ValueError("param is None")
        codec.write_uint32(param)
        if value is None:
            raise ValueError("value is None")
        codec.write_binary(value)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_scan_get_param(self, param, value):
        assert type(value) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_SCAN_GET_PARAM_ID,
                sequence=request.sequence))
        if param is None:
            raise ValueError("param is None")
        codec.write_uint32(param)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        value.value = codec.read_binary()
        _result = codec.read_uint32()
        return _result

    def rpc_le_scan_start(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_SCAN_START_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_scan_timer_start(self, tick):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_SCAN_TIMER_START_ID,
                sequence=request.sequence))
        if tick is None:
            raise ValueError("tick is None")
        codec.write_uint32(tick)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_scan_stop(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_SCAN_STOP_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_scan_info_filter(self, enable, offset, len, p_filter):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_SCAN_INFO_FILTER_ID,
                sequence=request.sequence))
        if enable is None:
            raise ValueError("enable is None")
        codec.write_bool(enable)
        if offset is None:
            raise ValueError("offset is None")
        codec.write_uint8(offset)
        if len is None:
            raise ValueError("len is None")
        codec.write_uint8(len)
        if p_filter is None:
            raise ValueError("p_filter is None")
        for _i0 in p_filter:
            codec.write_uint8(_i0)


        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result


# Client for rpc_gap_conn
class rpc_gap_connClient(interface.Irpc_gap_conn):
    def __init__(self, manager):
        super(rpc_gap_connClient, self).__init__()
        self._clientManager = manager

    def rpc_le_get_conn_param(self, param, value, conn_id):
        assert type(value) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GET_CONN_PARAM_ID,
                sequence=request.sequence))
        if param is None:
            raise ValueError("param is None")
        codec.write_uint32(param)
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        value.value = codec.read_binary()
        _result = codec.read_uint32()
        return _result

    def rpc_le_get_conn_info(self, conn_id, p_conn_info):
        assert type(p_conn_info) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GET_CONN_INFO_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        p_conn_info.value = common.RPC_T_GAP_CONN_INFO()._read(codec)
        _result = codec.read_bool()
        return _result

    def rpc_le_get_conn_addr(self, conn_id, bd_addr, bd_type):
        assert type(bd_addr) is erpc.Reference, "out parameter must be a Reference object"
        assert type(bd_type) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GET_CONN_ADDR_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        bd_addr.value = []
        for _i0 in range(6):
            _v0 = codec.read_uint8()
            bd_addr.value.append(_v0)

        bd_type.value = codec.read_uint8()
        _result = codec.read_bool()
        return _result

    def rpc_le_get_conn_id(self, bd_addr, bd_type, p_conn_id):
        assert type(p_conn_id) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GET_CONN_ID_ID,
                sequence=request.sequence))
        if bd_addr is None:
            raise ValueError("bd_addr is None")
        for _i0 in bd_addr:
            codec.write_uint8(_i0)

        if bd_type is None:
            raise ValueError("bd_type is None")
        codec.write_uint8(bd_type)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        p_conn_id.value = codec.read_uint8()
        _result = codec.read_bool()
        return _result

    def rpc_le_get_active_link_num(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GET_ACTIVE_LINK_NUM_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint8()
        return _result

    def rpc_le_get_idle_link_num(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GET_IDLE_LINK_NUM_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint8()
        return _result

    def rpc_le_disconnect(self, conn_id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_DISCONNECT_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_read_rssi(self, conn_id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_READ_RSSI_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_set_data_len(self, conn_id, tx_octets, tx_time):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_SET_DATA_LEN_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if tx_octets is None:
            raise ValueError("tx_octets is None")
        codec.write_uint16(tx_octets)
        if tx_time is None:
            raise ValueError("tx_time is None")
        codec.write_uint16(tx_time)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_set_phy(self, conn_id, all_phys, tx_phys, rx_phys, phy_options):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_SET_PHY_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if all_phys is None:
            raise ValueError("all_phys is None")
        codec.write_uint8(all_phys)
        if tx_phys is None:
            raise ValueError("tx_phys is None")
        codec.write_uint8(tx_phys)
        if rx_phys is None:
            raise ValueError("rx_phys is None")
        codec.write_uint8(rx_phys)
        if phy_options is None:
            raise ValueError("phy_options is None")
        codec.write_uint32(phy_options)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_set_conn_param(self, conn_type, p_conn_param):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_SET_CONN_PARAM_ID,
                sequence=request.sequence))
        if conn_type is None:
            raise ValueError("conn_type is None")
        codec.write_uint32(conn_type)
        if p_conn_param is None:
            raise ValueError("p_conn_param is None")
        p_conn_param._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_connect(self, init_phys, remote_bd, remote_bd_type, local_bd_type, scan_timeout):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_CONNECT_ID,
                sequence=request.sequence))
        if init_phys is None:
            raise ValueError("init_phys is None")
        codec.write_uint8(init_phys)
        if remote_bd is None:
            raise ValueError("remote_bd is None")
        for _i0 in remote_bd:
            codec.write_uint8(_i0)

        if remote_bd_type is None:
            raise ValueError("remote_bd_type is None")
        codec.write_uint32(remote_bd_type)
        if local_bd_type is None:
            raise ValueError("local_bd_type is None")
        codec.write_uint32(local_bd_type)
        if scan_timeout is None:
            raise ValueError("scan_timeout is None")
        codec.write_uint16(scan_timeout)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_le_update_conn_param(self, conn_id, conn_interval_min, conn_interval_max, conn_latency, supervision_timeout, ce_length_min, ce_length_max):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_UPDATE_CONN_PARAM_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if conn_interval_min is None:
            raise ValueError("conn_interval_min is None")
        codec.write_uint16(conn_interval_min)
        if conn_interval_max is None:
            raise ValueError("conn_interval_max is None")
        codec.write_uint16(conn_interval_max)
        if conn_latency is None:
            raise ValueError("conn_latency is None")
        codec.write_uint16(conn_latency)
        if supervision_timeout is None:
            raise ValueError("supervision_timeout is None")
        codec.write_uint16(supervision_timeout)
        if ce_length_min is None:
            raise ValueError("ce_length_min is None")
        codec.write_uint16(ce_length_min)
        if ce_length_max is None:
            raise ValueError("ce_length_max is None")
        codec.write_uint16(ce_length_max)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result


# Client for rpc_gap_storage
class rpc_gap_storageClient(interface.Irpc_gap_storage):
    def __init__(self, manager):
        super(rpc_gap_storageClient, self).__init__()
        self._clientManager = manager

    def rpc_flash_save_local_name(self, p_data):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_FLASH_SAVE_LOCAL_NAME_ID,
                sequence=request.sequence))
        if p_data is None:
            raise ValueError("p_data is None")
        p_data._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_flash_load_local_name(self, p_data):
        assert type(p_data) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_FLASH_LOAD_LOCAL_NAME_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        p_data.value = common.RPC_T_LOCAL_NAME()._read(codec)
        _result = codec.read_uint32()
        return _result

    def rpc_flash_save_local_appearance(self, p_data):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_FLASH_SAVE_LOCAL_APPEARANCE_ID,
                sequence=request.sequence))
        if p_data is None:
            raise ValueError("p_data is None")
        p_data._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_flash_load_local_appearance(self, p_data):
        assert type(p_data) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_FLASH_LOAD_LOCAL_APPEARANCE_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        p_data.value = common.RPC_T_LOCAL_APPEARANCE()._read(codec)
        _result = codec.read_uint32()
        return _result

    def rpc_le_find_key_entry(self, bd_addr, bd_type):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_FIND_KEY_ENTRY_ID,
                sequence=request.sequence))
        if bd_addr is None:
            raise ValueError("bd_addr is None")
        for _i0 in bd_addr:
            codec.write_uint8(_i0)

        if bd_type is None:
            raise ValueError("bd_type is None")
        codec.write_uint32(bd_type)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = common.RPC_T_LE_KEY_ENTRY()._read(codec)
        return _result

    def rpc_le_find_key_entry_by_idx(self, idx):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_FIND_KEY_ENTRY_BY_IDX_ID,
                sequence=request.sequence))
        if idx is None:
            raise ValueError("idx is None")
        codec.write_uint8(idx)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = common.RPC_T_LE_KEY_ENTRY()._read(codec)
        return _result

    def rpc_le_get_bond_dev_num(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GET_BOND_DEV_NUM_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint8()
        return _result

    def rpc_le_get_low_priority_bond(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GET_LOW_PRIORITY_BOND_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = common.RPC_T_LE_KEY_ENTRY()._read(codec)
        return _result

    def rpc_le_get_high_priority_bond(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GET_HIGH_PRIORITY_BOND_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = common.RPC_T_LE_KEY_ENTRY()._read(codec)
        return _result

    def rpc_le_set_high_priority_bond(self, bd_addr, bd_type):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_SET_HIGH_PRIORITY_BOND_ID,
                sequence=request.sequence))
        if bd_addr is None:
            raise ValueError("bd_addr is None")
        for _i0 in bd_addr:
            codec.write_uint8(_i0)

        if bd_type is None:
            raise ValueError("bd_type is None")
        codec.write_uint32(bd_type)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def rpc_le_resolve_random_address(self, unresolved_addr, resolved_addr, resolved_addr_type):
        assert type(resolved_addr) is erpc.Reference, "inout parameter must be a Reference object"
        assert type(resolved_addr_type) is erpc.Reference, "inout parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_RESOLVE_RANDOM_ADDRESS_ID,
                sequence=request.sequence))
        if unresolved_addr is None:
            raise ValueError("unresolved_addr is None")
        for _i0 in unresolved_addr:
            codec.write_uint8(_i0)

        if resolved_addr is None:
            raise ValueError("resolved_addr is None")
        for _i0 in resolved_addr.value:
            codec.write_uint8(_i0)

        if resolved_addr_type is None:
            raise ValueError("resolved_addr_type is None")
        codec.write_uint32(resolved_addr_type.value)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        resolved_addr.value = []
        for _i0 in range(6):
            _v0 = codec.read_uint8()
            resolved_addr.value.append(_v0)

        resolved_addr_type.value = codec.read_uint32()
        _result = codec.read_bool()
        return _result

    def rpc_le_get_cccd_data(self, p_entry, p_data):
        assert type(p_data) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GET_CCCD_DATA_ID,
                sequence=request.sequence))
        if p_entry is None:
            raise ValueError("p_entry is None")
        p_entry._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        p_data.value = common.RPC_T_LE_CCCD()._read(codec)
        _result = codec.read_bool()
        return _result

    def rpc_le_gen_bond_dev(self, bd_addr, bd_type, local_bd_type, local_ltk, key_type, p_cccd):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GEN_BOND_DEV_ID,
                sequence=request.sequence))
        if bd_addr is None:
            raise ValueError("bd_addr is None")
        for _i0 in bd_addr:
            codec.write_uint8(_i0)

        if bd_type is None:
            raise ValueError("bd_type is None")
        codec.write_uint32(bd_type)
        if local_bd_type is None:
            raise ValueError("local_bd_type is None")
        codec.write_uint32(local_bd_type)
        if local_ltk is None:
            raise ValueError("local_ltk is None")
        codec.write_binary(local_ltk)
        if key_type is None:
            raise ValueError("key_type is None")
        codec.write_uint32(key_type)
        if p_cccd is None:
            raise ValueError("p_cccd is None")
        p_cccd._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def rpc_le_get_dev_bond_info_len(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GET_DEV_BOND_INFO_LEN_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint16()
        return _result

    def rpc_le_set_dev_bond_info(self, p_data, exist):
        assert type(exist) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_SET_DEV_BOND_INFO_ID,
                sequence=request.sequence))
        if p_data is None:
            raise ValueError("p_data is None")
        codec.write_binary(p_data)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        exist.value = codec.read_bool()
        _result = common.RPC_T_LE_KEY_ENTRY()._read(codec)
        return _result

    def rpc_le_get_dev_bond_info(self, p_entry, p_data):
        assert type(p_data) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_LE_GET_DEV_BOND_INFO_ID,
                sequence=request.sequence))
        if p_entry is None:
            raise ValueError("p_entry is None")
        p_entry._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        p_data.value = codec.read_binary()
        _result = codec.read_bool()
        return _result


# Client for rpc_gatt_client
class rpc_gatt_clientClient(interface.Irpc_gatt_client):
    def __init__(self, manager):
        super(rpc_gatt_clientClient, self).__init__()
        self._clientManager = manager

    def rpc_ble_client_init(self, num):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_BLE_CLIENT_INIT_ID,
                sequence=request.sequence))
        if num is None:
            raise ValueError("num is None")
        codec.write_uint8(num)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def rpc_ble_add_client(self, app_id, link_num):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_BLE_ADD_CLIENT_ID,
                sequence=request.sequence))
        if app_id is None:
            raise ValueError("app_id is None")
        codec.write_uint8(app_id)
        if link_num is None:
            raise ValueError("link_num is None")
        codec.write_uint8(link_num)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint8()
        return _result

    def rpc_client_init(self, client_num):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_CLIENT_INIT_ID,
                sequence=request.sequence))
        if client_num is None:
            raise ValueError("client_num is None")
        codec.write_uint8(client_num)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_client_all_primary_srv_discovery(self, conn_id, client_id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_CLIENT_ALL_PRIMARY_SRV_DISCOVERY_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if client_id is None:
            raise ValueError("client_id is None")
        codec.write_uint8(client_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_client_by_uuid_srv_discovery(self, conn_id, client_id, uuid16):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_CLIENT_BY_UUID_SRV_DISCOVERY_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if client_id is None:
            raise ValueError("client_id is None")
        codec.write_uint8(client_id)
        if uuid16 is None:
            raise ValueError("uuid16 is None")
        codec.write_uint16(uuid16)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_client_by_uuid128_srv_discovery(self, conn_id, client_id, p_uuid128):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_CLIENT_BY_UUID128_SRV_DISCOVERY_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if client_id is None:
            raise ValueError("client_id is None")
        codec.write_uint8(client_id)
        if p_uuid128 is None:
            raise ValueError("p_uuid128 is None")
        for _i0 in p_uuid128:
            codec.write_uint8(_i0)


        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_client_relationship_discovery(self, conn_id, client_id, start_handle, end_handle):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_CLIENT_RELATIONSHIP_DISCOVERY_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if client_id is None:
            raise ValueError("client_id is None")
        codec.write_uint8(client_id)
        if start_handle is None:
            raise ValueError("start_handle is None")
        codec.write_uint16(start_handle)
        if end_handle is None:
            raise ValueError("end_handle is None")
        codec.write_uint16(end_handle)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_client_all_char_discovery(self, conn_id, client_id, start_handle, end_handle):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_CLIENT_ALL_CHAR_DISCOVERY_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if client_id is None:
            raise ValueError("client_id is None")
        codec.write_uint8(client_id)
        if start_handle is None:
            raise ValueError("start_handle is None")
        codec.write_uint16(start_handle)
        if end_handle is None:
            raise ValueError("end_handle is None")
        codec.write_uint16(end_handle)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_client_by_uuid_char_discovery(self, conn_id, client_id, start_handle, end_handle, uuid16):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_CLIENT_BY_UUID_CHAR_DISCOVERY_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if client_id is None:
            raise ValueError("client_id is None")
        codec.write_uint8(client_id)
        if start_handle is None:
            raise ValueError("start_handle is None")
        codec.write_uint16(start_handle)
        if end_handle is None:
            raise ValueError("end_handle is None")
        codec.write_uint16(end_handle)
        if uuid16 is None:
            raise ValueError("uuid16 is None")
        codec.write_uint16(uuid16)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_client_by_uuid128_char_discovery(self, conn_id, client_id, start_handle, end_handle, p_uuid128):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_CLIENT_BY_UUID128_CHAR_DISCOVERY_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if client_id is None:
            raise ValueError("client_id is None")
        codec.write_uint8(client_id)
        if start_handle is None:
            raise ValueError("start_handle is None")
        codec.write_uint16(start_handle)
        if end_handle is None:
            raise ValueError("end_handle is None")
        codec.write_uint16(end_handle)
        if p_uuid128 is None:
            raise ValueError("p_uuid128 is None")
        for _i0 in p_uuid128:
            codec.write_uint8(_i0)


        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_client_all_char_descriptor_discovery(self, conn_id, client_id, start_handle, end_handle):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_CLIENT_ALL_CHAR_DESCRIPTOR_DISCOVERY_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if client_id is None:
            raise ValueError("client_id is None")
        codec.write_uint8(client_id)
        if start_handle is None:
            raise ValueError("start_handle is None")
        codec.write_uint16(start_handle)
        if end_handle is None:
            raise ValueError("end_handle is None")
        codec.write_uint16(end_handle)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_client_attr_read(self, conn_id, client_id, handle):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_CLIENT_ATTR_READ_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if client_id is None:
            raise ValueError("client_id is None")
        codec.write_uint8(client_id)
        if handle is None:
            raise ValueError("handle is None")
        codec.write_uint16(handle)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_client_attr_read_using_uuid(self, conn_id, client_id, start_handle, end_handle, uuid16, p_uuid128):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_CLIENT_ATTR_READ_USING_UUID_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if client_id is None:
            raise ValueError("client_id is None")
        codec.write_uint8(client_id)
        if start_handle is None:
            raise ValueError("start_handle is None")
        codec.write_uint16(start_handle)
        if end_handle is None:
            raise ValueError("end_handle is None")
        codec.write_uint16(end_handle)
        if uuid16 is None:
            raise ValueError("uuid16 is None")
        codec.write_uint16(uuid16)
        if p_uuid128 is None:
            raise ValueError("p_uuid128 is None")
        for _i0 in p_uuid128:
            codec.write_uint8(_i0)


        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_client_attr_write(self, conn_id, client_id, write_type, handle, data):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_CLIENT_ATTR_WRITE_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if client_id is None:
            raise ValueError("client_id is None")
        codec.write_uint8(client_id)
        if write_type is None:
            raise ValueError("write_type is None")
        codec.write_uint32(write_type)
        if handle is None:
            raise ValueError("handle is None")
        codec.write_uint16(handle)
        if data is None:
            raise ValueError("data is None")
        codec.write_binary(data)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result

    def rpc_client_attr_ind_confirm(self, conn_id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_CLIENT_ATTR_IND_CONFIRM_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint32()
        return _result


# Client for rpc_gatt_server
class rpc_gatt_serverClient(interface.Irpc_gatt_server):
    def __init__(self, manager):
        super(rpc_gatt_serverClient, self).__init__()
        self._clientManager = manager

    def rpc_ble_server_init(self, num):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_BLE_SERVER_INIT_ID,
                sequence=request.sequence))
        if num is None:
            raise ValueError("num is None")
        codec.write_uint8(num)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def rpc_ble_create_service(self, uuid, uuid_length, is_primary):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_BLE_CREATE_SERVICE_ID,
                sequence=request.sequence))
        if uuid is None:
            raise ValueError("uuid is None")
        for _i0 in uuid:
            codec.write_uint8(_i0)

        if uuid_length is None:
            raise ValueError("uuid_length is None")
        codec.write_uint8(uuid_length)
        if is_primary is None:
            raise ValueError("is_primary is None")
        codec.write_bool(is_primary)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint8()
        return _result

    def rpc_ble_delete_service(self, app_id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_BLE_DELETE_SERVICE_ID,
                sequence=request.sequence))
        if app_id is None:
            raise ValueError("app_id is None")
        codec.write_uint8(app_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def rpc_ble_service_start(self, app_id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_BLE_SERVICE_START_ID,
                sequence=request.sequence))
        if app_id is None:
            raise ValueError("app_id is None")
        codec.write_uint8(app_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint8()
        return _result

    def rpc_ble_get_servie_handle(self, app_id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_BLE_GET_SERVIE_HANDLE_ID,
                sequence=request.sequence))
        if app_id is None:
            raise ValueError("app_id is None")
        codec.write_uint8(app_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint8()
        return _result

    def rpc_ble_create_char(self, app_id, uuid, uuid_length, properties, permissions):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_BLE_CREATE_CHAR_ID,
                sequence=request.sequence))
        if app_id is None:
            raise ValueError("app_id is None")
        codec.write_uint8(app_id)
        if uuid is None:
            raise ValueError("uuid is None")
        for _i0 in uuid:
            codec.write_uint8(_i0)

        if uuid_length is None:
            raise ValueError("uuid_length is None")
        codec.write_uint8(uuid_length)
        if properties is None:
            raise ValueError("properties is None")
        codec.write_uint8(properties)
        if permissions is None:
            raise ValueError("permissions is None")
        codec.write_uint32(permissions)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint16()
        return _result

    def rpc_ble_create_desc(self, app_id, char_handle, uuid, uuid_length, flags, permissions, value_length, p_value):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_BLE_CREATE_DESC_ID,
                sequence=request.sequence))
        if app_id is None:
            raise ValueError("app_id is None")
        codec.write_uint8(app_id)
        if char_handle is None:
            raise ValueError("char_handle is None")
        codec.write_uint16(char_handle)
        if uuid is None:
            raise ValueError("uuid is None")
        for _i0 in uuid:
            codec.write_uint8(_i0)

        if uuid_length is None:
            raise ValueError("uuid_length is None")
        codec.write_uint8(uuid_length)
        if flags is None:
            raise ValueError("flags is None")
        codec.write_uint8(flags)
        if permissions is None:
            raise ValueError("permissions is None")
        codec.write_uint32(permissions)
        if value_length is None:
            raise ValueError("value_length is None")
        codec.write_uint16(value_length)
        if p_value is None:
            raise ValueError("p_value is None")
        codec.write_binary(p_value)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint16()
        return _result

    def rpc_server_send_data(self, conn_id, service_id, attrib_index, data, pdu_type):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_SERVER_SEND_DATA_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if service_id is None:
            raise ValueError("service_id is None")
        codec.write_uint8(service_id)
        if attrib_index is None:
            raise ValueError("attrib_index is None")
        codec.write_uint16(attrib_index)
        if data is None:
            raise ValueError("data is None")
        codec.write_binary(data)
        if pdu_type is None:
            raise ValueError("pdu_type is None")
        codec.write_uint32(pdu_type)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def rpc_ble_server_get_attr_value(self, app_id, attr_handle):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_BLE_SERVER_GET_ATTR_VALUE_ID,
                sequence=request.sequence))
        if app_id is None:
            raise ValueError("app_id is None")
        codec.write_uint8(app_id)
        if attr_handle is None:
            raise ValueError("attr_handle is None")
        codec.write_uint16(attr_handle)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_binary()
        return _result

    def rpc_server_exec_write_confirm(self, conn_id, cause, handle):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_SERVER_EXEC_WRITE_CONFIRM_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if cause is None:
            raise ValueError("cause is None")
        codec.write_uint16(cause)
        if handle is None:
            raise ValueError("handle is None")
        codec.write_uint16(handle)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def rpc_server_attr_write_confirm(self, conn_id, service_id, attrib_index, cause):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_SERVER_ATTR_WRITE_CONFIRM_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if service_id is None:
            raise ValueError("service_id is None")
        codec.write_uint8(service_id)
        if attrib_index is None:
            raise ValueError("attrib_index is None")
        codec.write_uint16(attrib_index)
        if cause is None:
            raise ValueError("cause is None")
        codec.write_uint32(cause)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def rpc_server_attr_read_confirm(self, conn_id, service_id, attrib_index, data, cause):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_SERVER_ATTR_READ_CONFIRM_ID,
                sequence=request.sequence))
        if conn_id is None:
            raise ValueError("conn_id is None")
        codec.write_uint8(conn_id)
        if service_id is None:
            raise ValueError("service_id is None")
        codec.write_uint8(service_id)
        if attrib_index is None:
            raise ValueError("attrib_index is None")
        codec.write_uint16(attrib_index)
        if data is None:
            raise ValueError("data is None")
        codec.write_binary(data)
        if cause is None:
            raise ValueError("cause is None")
        codec.write_uint32(cause)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result



