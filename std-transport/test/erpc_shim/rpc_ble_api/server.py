#
# Generated by erpcgen 1.8.0 on Thu Oct 22 01:33:52 2020.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for rpc_ble_host
class rpc_ble_hostService(erpc.server.Service):
    def __init__(self, handler):
        super(rpc_ble_hostService, self).__init__(interface.Irpc_ble_host.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.Irpc_ble_host.RPC_BLE_INIT_ID: self._handle_rpc_ble_init,
                interface.Irpc_ble_host.RPC_BLE_START_ID: self._handle_rpc_ble_start,
                interface.Irpc_ble_host.RPC_BLE_DEINIT_ID: self._handle_rpc_ble_deinit,
            }

    def _handle_rpc_ble_init(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_ble_init()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_ble_host.SERVICE_ID,
            request=interface.Irpc_ble_host.RPC_BLE_INIT_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_rpc_ble_start(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.rpc_ble_start()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_ble_host.SERVICE_ID,
            request=interface.Irpc_ble_host.RPC_BLE_START_ID,
            sequence=sequence))

    def _handle_rpc_ble_deinit(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.rpc_ble_deinit()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_ble_host.SERVICE_ID,
            request=interface.Irpc_ble_host.RPC_BLE_DEINIT_ID,
            sequence=sequence))


# Client for rpc_gap
class rpc_gapService(erpc.server.Service):
    def __init__(self, handler):
        super(rpc_gapService, self).__init__(interface.Irpc_gap.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.Irpc_gap.RPC_GAP_SET_PARAM_ID: self._handle_rpc_gap_set_param,
                interface.Irpc_gap.RPC_GAP_GET_PARAM_ID: self._handle_rpc_gap_get_param,
                interface.Irpc_gap.RPC_GAP_SET_PAIRABLE_MODE_ID: self._handle_rpc_gap_set_pairable_mode,
            }

    def _handle_rpc_gap_set_param(self, sequence, codec):
        # Read incoming parameters.
        param = codec.read_uint32()
        value = codec.read_binary()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_gap_set_param(param, value)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap.SERVICE_ID,
            request=interface.Irpc_gap.RPC_GAP_SET_PARAM_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_gap_get_param(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        value = erpc.Reference()

        # Read incoming parameters.
        param = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_gap_get_param(param, value)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap.SERVICE_ID,
            request=interface.Irpc_gap.RPC_GAP_GET_PARAM_ID,
            sequence=sequence))
        if value.value is None:
            raise ValueError("value is None")
        codec.write_binary(value.value)
        codec.write_uint32(_result)

    def _handle_rpc_gap_set_pairable_mode(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_gap_set_pairable_mode()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap.SERVICE_ID,
            request=interface.Irpc_gap.RPC_GAP_SET_PAIRABLE_MODE_ID,
            sequence=sequence))
        codec.write_uint32(_result)


# Client for rpc_gap_bone
class rpc_gap_boneService(erpc.server.Service):
    def __init__(self, handler):
        super(rpc_gap_boneService, self).__init__(interface.Irpc_gap_bone.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.Irpc_gap_bone.RPC_LE_BOND_SET_PARAM_ID: self._handle_rpc_le_bond_set_param,
                interface.Irpc_gap_bone.RPC_LE_BOND_GET_PARAM_ID: self._handle_rpc_le_bond_get_param,
                interface.Irpc_gap_bone.RPC_LE_BOND_PAIR_ID: self._handle_rpc_le_bond_pair,
                interface.Irpc_gap_bone.RPC_LE_BOND_GET_DISPLAY_KEY_ID: self._handle_rpc_le_bond_get_display_key,
                interface.Irpc_gap_bone.RPC_LE_BOND_PASSKEY_INPUT_CONFIRM_ID: self._handle_rpc_le_bond_passkey_input_confirm,
                interface.Irpc_gap_bone.RPC_LE_BOND_OOB_INPUT_CONFIRM_ID: self._handle_rpc_le_bond_oob_input_confirm,
                interface.Irpc_gap_bone.RPC_LE_BOND_JUST_WORK_CONFIRM_ID: self._handle_rpc_le_bond_just_work_confirm,
                interface.Irpc_gap_bone.RPC_LE_BOND_PASSKEY_DISPLAY_CONFIRM_ID: self._handle_rpc_le_bond_passkey_display_confirm,
                interface.Irpc_gap_bone.RPC_LE_BOND_USER_CONFIRM_ID: self._handle_rpc_le_bond_user_confirm,
                interface.Irpc_gap_bone.RPC_LE_BOND_CFG_LOCAL_KEY_DISTRIBUTE_ID: self._handle_rpc_le_bond_cfg_local_key_distribute,
                interface.Irpc_gap_bone.RPC_LE_BOND_CLEAR_ALL_KEYS_ID: self._handle_rpc_le_bond_clear_all_keys,
                interface.Irpc_gap_bone.RPC_LE_BOND_DELETE_BY_IDX_ID: self._handle_rpc_le_bond_delete_by_idx,
                interface.Irpc_gap_bone.RPC_LE_BOND_DELETE_BY_BD_ID: self._handle_rpc_le_bond_delete_by_bd,
                interface.Irpc_gap_bone.RPC_LE_BOND_GET_SEC_LEVEL_ID: self._handle_rpc_le_bond_get_sec_level,
            }

    def _handle_rpc_le_bond_set_param(self, sequence, codec):
        # Read incoming parameters.
        param = codec.read_uint32()
        value = codec.read_binary()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_bond_set_param(param, value)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_bone.SERVICE_ID,
            request=interface.Irpc_gap_bone.RPC_LE_BOND_SET_PARAM_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_bond_get_param(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        value = erpc.Reference()

        # Read incoming parameters.
        param = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_bond_get_param(param, value)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_bone.SERVICE_ID,
            request=interface.Irpc_gap_bone.RPC_LE_BOND_GET_PARAM_ID,
            sequence=sequence))
        if value.value is None:
            raise ValueError("value is None")
        codec.write_binary(value.value)
        codec.write_uint32(_result)

    def _handle_rpc_le_bond_pair(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_bond_pair(conn_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_bone.SERVICE_ID,
            request=interface.Irpc_gap_bone.RPC_LE_BOND_PAIR_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_bond_get_display_key(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        key = erpc.Reference()

        # Read incoming parameters.
        conn_id = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_bond_get_display_key(conn_id, key)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_bone.SERVICE_ID,
            request=interface.Irpc_gap_bone.RPC_LE_BOND_GET_DISPLAY_KEY_ID,
            sequence=sequence))
        if key.value is None:
            raise ValueError("key is None")
        codec.write_uint32(key.value)
        codec.write_uint32(_result)

    def _handle_rpc_le_bond_passkey_input_confirm(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        passcode = codec.read_uint32()
        cause = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_bond_passkey_input_confirm(conn_id, passcode, cause)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_bone.SERVICE_ID,
            request=interface.Irpc_gap_bone.RPC_LE_BOND_PASSKEY_INPUT_CONFIRM_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_bond_oob_input_confirm(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        cause = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_bond_oob_input_confirm(conn_id, cause)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_bone.SERVICE_ID,
            request=interface.Irpc_gap_bone.RPC_LE_BOND_OOB_INPUT_CONFIRM_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_bond_just_work_confirm(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        cause = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_bond_just_work_confirm(conn_id, cause)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_bone.SERVICE_ID,
            request=interface.Irpc_gap_bone.RPC_LE_BOND_JUST_WORK_CONFIRM_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_bond_passkey_display_confirm(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        cause = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_bond_passkey_display_confirm(conn_id, cause)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_bone.SERVICE_ID,
            request=interface.Irpc_gap_bone.RPC_LE_BOND_PASSKEY_DISPLAY_CONFIRM_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_bond_user_confirm(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        cause = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_bond_user_confirm(conn_id, cause)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_bone.SERVICE_ID,
            request=interface.Irpc_gap_bone.RPC_LE_BOND_USER_CONFIRM_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_bond_cfg_local_key_distribute(self, sequence, codec):
        # Read incoming parameters.
        init_dist = codec.read_uint8()
        rsp_dist = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_bond_cfg_local_key_distribute(init_dist, rsp_dist)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_bone.SERVICE_ID,
            request=interface.Irpc_gap_bone.RPC_LE_BOND_CFG_LOCAL_KEY_DISTRIBUTE_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_bond_clear_all_keys(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.rpc_le_bond_clear_all_keys()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_bone.SERVICE_ID,
            request=interface.Irpc_gap_bone.RPC_LE_BOND_CLEAR_ALL_KEYS_ID,
            sequence=sequence))

    def _handle_rpc_le_bond_delete_by_idx(self, sequence, codec):
        # Read incoming parameters.
        idx = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_bond_delete_by_idx(idx)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_bone.SERVICE_ID,
            request=interface.Irpc_gap_bone.RPC_LE_BOND_DELETE_BY_IDX_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_bond_delete_by_bd(self, sequence, codec):
        # Read incoming parameters.
        bd_addr = []
        for _i0 in range(6):
            _v0 = codec.read_uint8()
            bd_addr.append(_v0)

        bd_type = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_bond_delete_by_bd(bd_addr, bd_type)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_bone.SERVICE_ID,
            request=interface.Irpc_gap_bone.RPC_LE_BOND_DELETE_BY_BD_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_bond_get_sec_level(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        sec_type = erpc.Reference()

        # Read incoming parameters.
        conn_id = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_bond_get_sec_level(conn_id, sec_type)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_bone.SERVICE_ID,
            request=interface.Irpc_gap_bone.RPC_LE_BOND_GET_SEC_LEVEL_ID,
            sequence=sequence))
        if sec_type.value is None:
            raise ValueError("sec_type is None")
        codec.write_uint32(sec_type.value)
        codec.write_uint32(_result)


# Client for rpc_gap_le
class rpc_gap_leService(erpc.server.Service):
    def __init__(self, handler):
        super(rpc_gap_leService, self).__init__(interface.Irpc_gap_le.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.Irpc_gap_le.RPC_LE_GAP_INIT_ID: self._handle_rpc_le_gap_init,
                interface.Irpc_gap_le.RPC_LE_GAP_MSG_INFO_WAY_ID: self._handle_rpc_le_gap_msg_info_way,
                interface.Irpc_gap_le.RPC_LE_GET_MAX_LINK_NUM_ID: self._handle_rpc_le_get_max_link_num,
                interface.Irpc_gap_le.RPC_LE_SET_GAP_PARAM_ID: self._handle_rpc_le_set_gap_param,
                interface.Irpc_gap_le.RPC_LE_GET_GAP_PARAM_ID: self._handle_rpc_le_get_gap_param,
                interface.Irpc_gap_le.RPC_LE_MODIFY_WHITE_LIST_ID: self._handle_rpc_le_modify_white_list,
                interface.Irpc_gap_le.RPC_LE_GEN_RAND_ADDR_ID: self._handle_rpc_le_gen_rand_addr,
                interface.Irpc_gap_le.RPC_LE_SET_RAND_ADDR_ID: self._handle_rpc_le_set_rand_addr,
                interface.Irpc_gap_le.RPC_LE_CFG_LOCAL_IDENTITY_ADDRESS_ID: self._handle_rpc_le_cfg_local_identity_address,
                interface.Irpc_gap_le.RPC_LE_SET_HOST_CHANN_CLASSIF_ID: self._handle_rpc_le_set_host_chann_classif,
                interface.Irpc_gap_le.RPC_LE_WRITE_DEFAULT_DATA_LEN_ID: self._handle_rpc_le_write_default_data_len,
            }

    def _handle_rpc_le_gap_init(self, sequence, codec):
        # Read incoming parameters.
        link_num = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_gap_init(link_num)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_le.SERVICE_ID,
            request=interface.Irpc_gap_le.RPC_LE_GAP_INIT_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_rpc_le_gap_msg_info_way(self, sequence, codec):
        # Read incoming parameters.
        use_msg = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.rpc_le_gap_msg_info_way(use_msg)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_le.SERVICE_ID,
            request=interface.Irpc_gap_le.RPC_LE_GAP_MSG_INFO_WAY_ID,
            sequence=sequence))

    def _handle_rpc_le_get_max_link_num(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_get_max_link_num()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_le.SERVICE_ID,
            request=interface.Irpc_gap_le.RPC_LE_GET_MAX_LINK_NUM_ID,
            sequence=sequence))
        codec.write_uint8(_result)

    def _handle_rpc_le_set_gap_param(self, sequence, codec):
        # Read incoming parameters.
        param = codec.read_uint32()
        value = codec.read_binary()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_set_gap_param(param, value)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_le.SERVICE_ID,
            request=interface.Irpc_gap_le.RPC_LE_SET_GAP_PARAM_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_get_gap_param(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        value = erpc.Reference()

        # Read incoming parameters.
        param = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_get_gap_param(param, value)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_le.SERVICE_ID,
            request=interface.Irpc_gap_le.RPC_LE_GET_GAP_PARAM_ID,
            sequence=sequence))
        if value.value is None:
            raise ValueError("value is None")
        codec.write_binary(value.value)
        codec.write_uint32(_result)

    def _handle_rpc_le_modify_white_list(self, sequence, codec):
        # Read incoming parameters.
        operation = codec.read_uint32()
        bd_addr = []
        for _i0 in range(6):
            _v0 = codec.read_uint8()
            bd_addr.append(_v0)

        bd_type = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_modify_white_list(operation, bd_addr, bd_type)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_le.SERVICE_ID,
            request=interface.Irpc_gap_le.RPC_LE_MODIFY_WHITE_LIST_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_gen_rand_addr(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        random_bd = erpc.Reference()

        # Read incoming parameters.
        rand_addr_type = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_gen_rand_addr(rand_addr_type, random_bd)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_le.SERVICE_ID,
            request=interface.Irpc_gap_le.RPC_LE_GEN_RAND_ADDR_ID,
            sequence=sequence))
        if random_bd.value is None:
            raise ValueError("random_bd is None")
        for _i0 in random_bd.value:
            codec.write_uint8(_i0)

        codec.write_uint32(_result)

    def _handle_rpc_le_set_rand_addr(self, sequence, codec):
        # Read incoming parameters.
        random_bd = []
        for _i0 in range(6):
            _v0 = codec.read_uint8()
            random_bd.append(_v0)


        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_set_rand_addr(random_bd)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_le.SERVICE_ID,
            request=interface.Irpc_gap_le.RPC_LE_SET_RAND_ADDR_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_cfg_local_identity_address(self, sequence, codec):
        # Read incoming parameters.
        addr = []
        for _i0 in range(6):
            _v0 = codec.read_uint8()
            addr.append(_v0)

        ident_addr_type = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_cfg_local_identity_address(addr, ident_addr_type)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_le.SERVICE_ID,
            request=interface.Irpc_gap_le.RPC_LE_CFG_LOCAL_IDENTITY_ADDRESS_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_set_host_chann_classif(self, sequence, codec):
        # Read incoming parameters.
        p_channel_map = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_set_host_chann_classif(p_channel_map)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_le.SERVICE_ID,
            request=interface.Irpc_gap_le.RPC_LE_SET_HOST_CHANN_CLASSIF_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_write_default_data_len(self, sequence, codec):
        # Read incoming parameters.
        tx_octets = codec.read_uint16()
        tx_time = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_write_default_data_len(tx_octets, tx_time)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_le.SERVICE_ID,
            request=interface.Irpc_gap_le.RPC_LE_WRITE_DEFAULT_DATA_LEN_ID,
            sequence=sequence))
        codec.write_uint32(_result)


# Client for rpc_gap_config
class rpc_gap_configService(erpc.server.Service):
    def __init__(self, handler):
        super(rpc_gap_configService, self).__init__(interface.Irpc_gap_config.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.Irpc_gap_config.RPC_GAP_CONFIG_CCCD_NOT_CHECK_ID: self._handle_rpc_gap_config_cccd_not_check,
                interface.Irpc_gap_config.RPC_GAP_CONFIG_CCC_BITS_COUNT_ID: self._handle_rpc_gap_config_ccc_bits_count,
                interface.Irpc_gap_config.RPC_GAP_CONFIG_MAX_ATTRIBUTE_TABLE_COUNT_ID: self._handle_rpc_gap_config_max_attribute_table_count,
                interface.Irpc_gap_config.RPC_GAP_CONFIG_MAX_MTU_SIZE_ID: self._handle_rpc_gap_config_max_mtu_size,
                interface.Irpc_gap_config.RPC_GAP_CONFIG_BTE_POOL_SIZE_ID: self._handle_rpc_gap_config_bte_pool_size,
                interface.Irpc_gap_config.RPC_GAP_CONFIG_BT_REPORT_BUF_NUM_ID: self._handle_rpc_gap_config_bt_report_buf_num,
                interface.Irpc_gap_config.RPC_GAP_CONFIG_LE_KEY_STORAGE_FLAG_ID: self._handle_rpc_gap_config_le_key_storage_flag,
                interface.Irpc_gap_config.RPC_GAP_CONFIG_MAX_LE_PAIRED_DEVICE_ID: self._handle_rpc_gap_config_max_le_paired_device,
                interface.Irpc_gap_config.RPC_GAP_CONFIG_MAX_LE_LINK_NUM_ID: self._handle_rpc_gap_config_max_le_link_num,
            }

    def _handle_rpc_gap_config_cccd_not_check(self, sequence, codec):
        # Read incoming parameters.
        cccd_not_check_flag = codec.read_uint32()

        # Invoke user implementation of remote function.
        self._handler.rpc_gap_config_cccd_not_check(cccd_not_check_flag)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_config.SERVICE_ID,
            request=interface.Irpc_gap_config.RPC_GAP_CONFIG_CCCD_NOT_CHECK_ID,
            sequence=sequence))

    def _handle_rpc_gap_config_ccc_bits_count(self, sequence, codec):
        # Read incoming parameters.
        gatt_server_ccc_bits_count = codec.read_uint8()
        gatt_storage_ccc_bits_count = codec.read_uint8()

        # Invoke user implementation of remote function.
        self._handler.rpc_gap_config_ccc_bits_count(gatt_server_ccc_bits_count, gatt_storage_ccc_bits_count)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_config.SERVICE_ID,
            request=interface.Irpc_gap_config.RPC_GAP_CONFIG_CCC_BITS_COUNT_ID,
            sequence=sequence))

    def _handle_rpc_gap_config_max_attribute_table_count(self, sequence, codec):
        # Read incoming parameters.
        gatt_max_attribute_table_count = codec.read_uint8()

        # Invoke user implementation of remote function.
        self._handler.rpc_gap_config_max_attribute_table_count(gatt_max_attribute_table_count)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_config.SERVICE_ID,
            request=interface.Irpc_gap_config.RPC_GAP_CONFIG_MAX_ATTRIBUTE_TABLE_COUNT_ID,
            sequence=sequence))

    def _handle_rpc_gap_config_max_mtu_size(self, sequence, codec):
        # Read incoming parameters.
        att_max_mtu_size = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.rpc_gap_config_max_mtu_size(att_max_mtu_size)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_config.SERVICE_ID,
            request=interface.Irpc_gap_config.RPC_GAP_CONFIG_MAX_MTU_SIZE_ID,
            sequence=sequence))

    def _handle_rpc_gap_config_bte_pool_size(self, sequence, codec):
        # Read incoming parameters.
        bte_pool_size = codec.read_uint8()

        # Invoke user implementation of remote function.
        self._handler.rpc_gap_config_bte_pool_size(bte_pool_size)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_config.SERVICE_ID,
            request=interface.Irpc_gap_config.RPC_GAP_CONFIG_BTE_POOL_SIZE_ID,
            sequence=sequence))

    def _handle_rpc_gap_config_bt_report_buf_num(self, sequence, codec):
        # Read incoming parameters.
        bt_report_buf_num = codec.read_uint8()

        # Invoke user implementation of remote function.
        self._handler.rpc_gap_config_bt_report_buf_num(bt_report_buf_num)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_config.SERVICE_ID,
            request=interface.Irpc_gap_config.RPC_GAP_CONFIG_BT_REPORT_BUF_NUM_ID,
            sequence=sequence))

    def _handle_rpc_gap_config_le_key_storage_flag(self, sequence, codec):
        # Read incoming parameters.
        le_key_storage_flag = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.rpc_gap_config_le_key_storage_flag(le_key_storage_flag)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_config.SERVICE_ID,
            request=interface.Irpc_gap_config.RPC_GAP_CONFIG_LE_KEY_STORAGE_FLAG_ID,
            sequence=sequence))

    def _handle_rpc_gap_config_max_le_paired_device(self, sequence, codec):
        # Read incoming parameters.
        max_le_paired_device = codec.read_uint8()

        # Invoke user implementation of remote function.
        self._handler.rpc_gap_config_max_le_paired_device(max_le_paired_device)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_config.SERVICE_ID,
            request=interface.Irpc_gap_config.RPC_GAP_CONFIG_MAX_LE_PAIRED_DEVICE_ID,
            sequence=sequence))

    def _handle_rpc_gap_config_max_le_link_num(self, sequence, codec):
        # Read incoming parameters.
        le_link_num = codec.read_uint8()

        # Invoke user implementation of remote function.
        self._handler.rpc_gap_config_max_le_link_num(le_link_num)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_config.SERVICE_ID,
            request=interface.Irpc_gap_config.RPC_GAP_CONFIG_MAX_LE_LINK_NUM_ID,
            sequence=sequence))


# Client for rpc_gap_adv
class rpc_gap_advService(erpc.server.Service):
    def __init__(self, handler):
        super(rpc_gap_advService, self).__init__(interface.Irpc_gap_adv.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.Irpc_gap_adv.RPC_LE_ADV_SET_PARAM_ID: self._handle_rpc_le_adv_set_param,
                interface.Irpc_gap_adv.RPC_LE_ADV_GET_PARAM_ID: self._handle_rpc_le_adv_get_param,
                interface.Irpc_gap_adv.RPC_LE_ADV_START_ID: self._handle_rpc_le_adv_start,
                interface.Irpc_gap_adv.RPC_LE_ADV_STOP_ID: self._handle_rpc_le_adv_stop,
                interface.Irpc_gap_adv.RPC_LE_ADV_UPDATE_PARAM_ID: self._handle_rpc_le_adv_update_param,
            }

    def _handle_rpc_le_adv_set_param(self, sequence, codec):
        # Read incoming parameters.
        param = codec.read_uint32()
        value = codec.read_binary()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_adv_set_param(param, value)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_adv.SERVICE_ID,
            request=interface.Irpc_gap_adv.RPC_LE_ADV_SET_PARAM_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_adv_get_param(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        value = erpc.Reference()

        # Read incoming parameters.
        param = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_adv_get_param(param, value)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_adv.SERVICE_ID,
            request=interface.Irpc_gap_adv.RPC_LE_ADV_GET_PARAM_ID,
            sequence=sequence))
        if value.value is None:
            raise ValueError("value is None")
        codec.write_binary(value.value)
        codec.write_uint32(_result)

    def _handle_rpc_le_adv_start(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_adv_start()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_adv.SERVICE_ID,
            request=interface.Irpc_gap_adv.RPC_LE_ADV_START_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_adv_stop(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_adv_stop()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_adv.SERVICE_ID,
            request=interface.Irpc_gap_adv.RPC_LE_ADV_STOP_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_adv_update_param(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_adv_update_param()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_adv.SERVICE_ID,
            request=interface.Irpc_gap_adv.RPC_LE_ADV_UPDATE_PARAM_ID,
            sequence=sequence))
        codec.write_uint32(_result)


# Client for rpc_gap_scan
class rpc_gap_scanService(erpc.server.Service):
    def __init__(self, handler):
        super(rpc_gap_scanService, self).__init__(interface.Irpc_gap_scan.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.Irpc_gap_scan.RPC_LE_SCAN_SET_PARAM_ID: self._handle_rpc_le_scan_set_param,
                interface.Irpc_gap_scan.RPC_LE_SCAN_GET_PARAM_ID: self._handle_rpc_le_scan_get_param,
                interface.Irpc_gap_scan.RPC_LE_SCAN_START_ID: self._handle_rpc_le_scan_start,
                interface.Irpc_gap_scan.RPC_LE_SCAN_TIMER_START_ID: self._handle_rpc_le_scan_timer_start,
                interface.Irpc_gap_scan.RPC_LE_SCAN_STOP_ID: self._handle_rpc_le_scan_stop,
                interface.Irpc_gap_scan.RPC_LE_SCAN_INFO_FILTER_ID: self._handle_rpc_le_scan_info_filter,
            }

    def _handle_rpc_le_scan_set_param(self, sequence, codec):
        # Read incoming parameters.
        param = codec.read_uint32()
        value = codec.read_binary()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_scan_set_param(param, value)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_scan.SERVICE_ID,
            request=interface.Irpc_gap_scan.RPC_LE_SCAN_SET_PARAM_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_scan_get_param(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        value = erpc.Reference()

        # Read incoming parameters.
        param = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_scan_get_param(param, value)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_scan.SERVICE_ID,
            request=interface.Irpc_gap_scan.RPC_LE_SCAN_GET_PARAM_ID,
            sequence=sequence))
        if value.value is None:
            raise ValueError("value is None")
        codec.write_binary(value.value)
        codec.write_uint32(_result)

    def _handle_rpc_le_scan_start(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_scan_start()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_scan.SERVICE_ID,
            request=interface.Irpc_gap_scan.RPC_LE_SCAN_START_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_scan_timer_start(self, sequence, codec):
        # Read incoming parameters.
        tick = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_scan_timer_start(tick)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_scan.SERVICE_ID,
            request=interface.Irpc_gap_scan.RPC_LE_SCAN_TIMER_START_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_scan_stop(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_scan_stop()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_scan.SERVICE_ID,
            request=interface.Irpc_gap_scan.RPC_LE_SCAN_STOP_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_scan_info_filter(self, sequence, codec):
        # Read incoming parameters.
        enable = codec.read_bool()
        offset = codec.read_uint8()
        len = codec.read_uint8()
        p_filter = []
        for _i0 in range(31):
            _v0 = codec.read_uint8()
            p_filter.append(_v0)


        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_scan_info_filter(enable, offset, len, p_filter)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_scan.SERVICE_ID,
            request=interface.Irpc_gap_scan.RPC_LE_SCAN_INFO_FILTER_ID,
            sequence=sequence))
        codec.write_bool(_result)


# Client for rpc_gap_conn
class rpc_gap_connService(erpc.server.Service):
    def __init__(self, handler):
        super(rpc_gap_connService, self).__init__(interface.Irpc_gap_conn.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.Irpc_gap_conn.RPC_LE_GET_CONN_PARAM_ID: self._handle_rpc_le_get_conn_param,
                interface.Irpc_gap_conn.RPC_LE_GET_CONN_INFO_ID: self._handle_rpc_le_get_conn_info,
                interface.Irpc_gap_conn.RPC_LE_GET_CONN_ADDR_ID: self._handle_rpc_le_get_conn_addr,
                interface.Irpc_gap_conn.RPC_LE_GET_CONN_ID_ID: self._handle_rpc_le_get_conn_id,
                interface.Irpc_gap_conn.RPC_LE_GET_ACTIVE_LINK_NUM_ID: self._handle_rpc_le_get_active_link_num,
                interface.Irpc_gap_conn.RPC_LE_GET_IDLE_LINK_NUM_ID: self._handle_rpc_le_get_idle_link_num,
                interface.Irpc_gap_conn.RPC_LE_DISCONNECT_ID: self._handle_rpc_le_disconnect,
                interface.Irpc_gap_conn.RPC_LE_READ_RSSI_ID: self._handle_rpc_le_read_rssi,
                interface.Irpc_gap_conn.RPC_LE_SET_DATA_LEN_ID: self._handle_rpc_le_set_data_len,
                interface.Irpc_gap_conn.RPC_LE_SET_PHY_ID: self._handle_rpc_le_set_phy,
                interface.Irpc_gap_conn.RPC_LE_SET_CONN_PARAM_ID: self._handle_rpc_le_set_conn_param,
                interface.Irpc_gap_conn.RPC_LE_CONNECT_ID: self._handle_rpc_le_connect,
                interface.Irpc_gap_conn.RPC_LE_UPDATE_CONN_PARAM_ID: self._handle_rpc_le_update_conn_param,
            }

    def _handle_rpc_le_get_conn_param(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        value = erpc.Reference()

        # Read incoming parameters.
        param = codec.read_uint32()
        conn_id = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_get_conn_param(param, value, conn_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_conn.SERVICE_ID,
            request=interface.Irpc_gap_conn.RPC_LE_GET_CONN_PARAM_ID,
            sequence=sequence))
        if value.value is None:
            raise ValueError("value is None")
        codec.write_binary(value.value)
        codec.write_uint32(_result)

    def _handle_rpc_le_get_conn_info(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        p_conn_info = erpc.Reference()

        # Read incoming parameters.
        conn_id = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_get_conn_info(conn_id, p_conn_info)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_conn.SERVICE_ID,
            request=interface.Irpc_gap_conn.RPC_LE_GET_CONN_INFO_ID,
            sequence=sequence))
        if p_conn_info.value is None:
            raise ValueError("p_conn_info is None")
        p_conn_info.value._write(codec)
        codec.write_bool(_result)

    def _handle_rpc_le_get_conn_addr(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        bd_addr = erpc.Reference()
        bd_type = erpc.Reference()

        # Read incoming parameters.
        conn_id = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_get_conn_addr(conn_id, bd_addr, bd_type)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_conn.SERVICE_ID,
            request=interface.Irpc_gap_conn.RPC_LE_GET_CONN_ADDR_ID,
            sequence=sequence))
        if bd_addr.value is None:
            raise ValueError("bd_addr is None")
        for _i0 in bd_addr.value:
            codec.write_uint8(_i0)

        if bd_type.value is None:
            raise ValueError("bd_type is None")
        codec.write_uint8(bd_type.value)
        codec.write_bool(_result)

    def _handle_rpc_le_get_conn_id(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        p_conn_id = erpc.Reference()

        # Read incoming parameters.
        bd_addr = []
        for _i0 in range(6):
            _v0 = codec.read_uint8()
            bd_addr.append(_v0)

        bd_type = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_get_conn_id(bd_addr, bd_type, p_conn_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_conn.SERVICE_ID,
            request=interface.Irpc_gap_conn.RPC_LE_GET_CONN_ID_ID,
            sequence=sequence))
        if p_conn_id.value is None:
            raise ValueError("p_conn_id is None")
        codec.write_uint8(p_conn_id.value)
        codec.write_bool(_result)

    def _handle_rpc_le_get_active_link_num(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_get_active_link_num()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_conn.SERVICE_ID,
            request=interface.Irpc_gap_conn.RPC_LE_GET_ACTIVE_LINK_NUM_ID,
            sequence=sequence))
        codec.write_uint8(_result)

    def _handle_rpc_le_get_idle_link_num(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_get_idle_link_num()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_conn.SERVICE_ID,
            request=interface.Irpc_gap_conn.RPC_LE_GET_IDLE_LINK_NUM_ID,
            sequence=sequence))
        codec.write_uint8(_result)

    def _handle_rpc_le_disconnect(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_disconnect(conn_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_conn.SERVICE_ID,
            request=interface.Irpc_gap_conn.RPC_LE_DISCONNECT_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_read_rssi(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_read_rssi(conn_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_conn.SERVICE_ID,
            request=interface.Irpc_gap_conn.RPC_LE_READ_RSSI_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_set_data_len(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        tx_octets = codec.read_uint16()
        tx_time = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_set_data_len(conn_id, tx_octets, tx_time)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_conn.SERVICE_ID,
            request=interface.Irpc_gap_conn.RPC_LE_SET_DATA_LEN_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_set_phy(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        all_phys = codec.read_uint8()
        tx_phys = codec.read_uint8()
        rx_phys = codec.read_uint8()
        phy_options = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_set_phy(conn_id, all_phys, tx_phys, rx_phys, phy_options)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_conn.SERVICE_ID,
            request=interface.Irpc_gap_conn.RPC_LE_SET_PHY_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_set_conn_param(self, sequence, codec):
        # Read incoming parameters.
        conn_type = codec.read_uint32()
        p_conn_param = common.RPC_T_GAP_LE_CONN_REQ_PARAM()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_set_conn_param(conn_type, p_conn_param)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_conn.SERVICE_ID,
            request=interface.Irpc_gap_conn.RPC_LE_SET_CONN_PARAM_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_connect(self, sequence, codec):
        # Read incoming parameters.
        init_phys = codec.read_uint8()
        remote_bd = []
        for _i0 in range(6):
            _v0 = codec.read_uint8()
            remote_bd.append(_v0)

        remote_bd_type = codec.read_uint32()
        local_bd_type = codec.read_uint32()
        scan_timeout = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_connect(init_phys, remote_bd, remote_bd_type, local_bd_type, scan_timeout)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_conn.SERVICE_ID,
            request=interface.Irpc_gap_conn.RPC_LE_CONNECT_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_le_update_conn_param(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        conn_interval_min = codec.read_uint16()
        conn_interval_max = codec.read_uint16()
        conn_latency = codec.read_uint16()
        supervision_timeout = codec.read_uint16()
        ce_length_min = codec.read_uint16()
        ce_length_max = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_update_conn_param(conn_id, conn_interval_min, conn_interval_max, conn_latency, supervision_timeout, ce_length_min, ce_length_max)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_conn.SERVICE_ID,
            request=interface.Irpc_gap_conn.RPC_LE_UPDATE_CONN_PARAM_ID,
            sequence=sequence))
        codec.write_uint32(_result)


# Client for rpc_gap_storage
class rpc_gap_storageService(erpc.server.Service):
    def __init__(self, handler):
        super(rpc_gap_storageService, self).__init__(interface.Irpc_gap_storage.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.Irpc_gap_storage.RPC_FLASH_SAVE_LOCAL_NAME_ID: self._handle_rpc_flash_save_local_name,
                interface.Irpc_gap_storage.RPC_FLASH_LOAD_LOCAL_NAME_ID: self._handle_rpc_flash_load_local_name,
                interface.Irpc_gap_storage.RPC_FLASH_SAVE_LOCAL_APPEARANCE_ID: self._handle_rpc_flash_save_local_appearance,
                interface.Irpc_gap_storage.RPC_FLASH_LOAD_LOCAL_APPEARANCE_ID: self._handle_rpc_flash_load_local_appearance,
                interface.Irpc_gap_storage.RPC_LE_FIND_KEY_ENTRY_ID: self._handle_rpc_le_find_key_entry,
                interface.Irpc_gap_storage.RPC_LE_FIND_KEY_ENTRY_BY_IDX_ID: self._handle_rpc_le_find_key_entry_by_idx,
                interface.Irpc_gap_storage.RPC_LE_GET_BOND_DEV_NUM_ID: self._handle_rpc_le_get_bond_dev_num,
                interface.Irpc_gap_storage.RPC_LE_GET_LOW_PRIORITY_BOND_ID: self._handle_rpc_le_get_low_priority_bond,
                interface.Irpc_gap_storage.RPC_LE_GET_HIGH_PRIORITY_BOND_ID: self._handle_rpc_le_get_high_priority_bond,
                interface.Irpc_gap_storage.RPC_LE_SET_HIGH_PRIORITY_BOND_ID: self._handle_rpc_le_set_high_priority_bond,
                interface.Irpc_gap_storage.RPC_LE_RESOLVE_RANDOM_ADDRESS_ID: self._handle_rpc_le_resolve_random_address,
                interface.Irpc_gap_storage.RPC_LE_GET_CCCD_DATA_ID: self._handle_rpc_le_get_cccd_data,
                interface.Irpc_gap_storage.RPC_LE_GEN_BOND_DEV_ID: self._handle_rpc_le_gen_bond_dev,
                interface.Irpc_gap_storage.RPC_LE_GET_DEV_BOND_INFO_LEN_ID: self._handle_rpc_le_get_dev_bond_info_len,
                interface.Irpc_gap_storage.RPC_LE_SET_DEV_BOND_INFO_ID: self._handle_rpc_le_set_dev_bond_info,
                interface.Irpc_gap_storage.RPC_LE_GET_DEV_BOND_INFO_ID: self._handle_rpc_le_get_dev_bond_info,
            }

    def _handle_rpc_flash_save_local_name(self, sequence, codec):
        # Read incoming parameters.
        p_data = common.RPC_T_LOCAL_NAME()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_flash_save_local_name(p_data)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_FLASH_SAVE_LOCAL_NAME_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_flash_load_local_name(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        p_data = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_flash_load_local_name(p_data)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_FLASH_LOAD_LOCAL_NAME_ID,
            sequence=sequence))
        if p_data.value is None:
            raise ValueError("p_data is None")
        p_data.value._write(codec)
        codec.write_uint32(_result)

    def _handle_rpc_flash_save_local_appearance(self, sequence, codec):
        # Read incoming parameters.
        p_data = common.RPC_T_LOCAL_APPEARANCE()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_flash_save_local_appearance(p_data)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_FLASH_SAVE_LOCAL_APPEARANCE_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_flash_load_local_appearance(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        p_data = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_flash_load_local_appearance(p_data)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_FLASH_LOAD_LOCAL_APPEARANCE_ID,
            sequence=sequence))
        if p_data.value is None:
            raise ValueError("p_data is None")
        p_data.value._write(codec)
        codec.write_uint32(_result)

    def _handle_rpc_le_find_key_entry(self, sequence, codec):
        # Read incoming parameters.
        bd_addr = []
        for _i0 in range(6):
            _v0 = codec.read_uint8()
            bd_addr.append(_v0)

        bd_type = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_find_key_entry(bd_addr, bd_type)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_LE_FIND_KEY_ENTRY_ID,
            sequence=sequence))
        _result._write(codec)

    def _handle_rpc_le_find_key_entry_by_idx(self, sequence, codec):
        # Read incoming parameters.
        idx = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_find_key_entry_by_idx(idx)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_LE_FIND_KEY_ENTRY_BY_IDX_ID,
            sequence=sequence))
        _result._write(codec)

    def _handle_rpc_le_get_bond_dev_num(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_get_bond_dev_num()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_LE_GET_BOND_DEV_NUM_ID,
            sequence=sequence))
        codec.write_uint8(_result)

    def _handle_rpc_le_get_low_priority_bond(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_get_low_priority_bond()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_LE_GET_LOW_PRIORITY_BOND_ID,
            sequence=sequence))
        _result._write(codec)

    def _handle_rpc_le_get_high_priority_bond(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_get_high_priority_bond()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_LE_GET_HIGH_PRIORITY_BOND_ID,
            sequence=sequence))
        _result._write(codec)

    def _handle_rpc_le_set_high_priority_bond(self, sequence, codec):
        # Read incoming parameters.
        bd_addr = []
        for _i0 in range(6):
            _v0 = codec.read_uint8()
            bd_addr.append(_v0)

        bd_type = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_set_high_priority_bond(bd_addr, bd_type)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_LE_SET_HIGH_PRIORITY_BOND_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_rpc_le_resolve_random_address(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        resolved_addr = erpc.Reference()
        resolved_addr_type = erpc.Reference()

        # Read incoming parameters.
        unresolved_addr = []
        for _i0 in range(6):
            _v0 = codec.read_uint8()
            unresolved_addr.append(_v0)

        resolved_addr.value = []
        for _i0 in range(6):
            _v0 = codec.read_uint8()
            resolved_addr.value.append(_v0)

        resolved_addr_type.value = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_resolve_random_address(unresolved_addr, resolved_addr, resolved_addr_type)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_LE_RESOLVE_RANDOM_ADDRESS_ID,
            sequence=sequence))
        if resolved_addr.value is None:
            raise ValueError("resolved_addr is None")
        for _i0 in resolved_addr.value:
            codec.write_uint8(_i0)

        if resolved_addr_type.value is None:
            raise ValueError("resolved_addr_type is None")
        codec.write_uint32(resolved_addr_type.value)
        codec.write_bool(_result)

    def _handle_rpc_le_get_cccd_data(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        p_data = erpc.Reference()

        # Read incoming parameters.
        p_entry = common.RPC_T_LE_KEY_ENTRY()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_get_cccd_data(p_entry, p_data)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_LE_GET_CCCD_DATA_ID,
            sequence=sequence))
        if p_data.value is None:
            raise ValueError("p_data is None")
        p_data.value._write(codec)
        codec.write_bool(_result)

    def _handle_rpc_le_gen_bond_dev(self, sequence, codec):
        # Read incoming parameters.
        bd_addr = []
        for _i0 in range(6):
            _v0 = codec.read_uint8()
            bd_addr.append(_v0)

        bd_type = codec.read_uint32()
        local_bd_type = codec.read_uint32()
        local_ltk = codec.read_binary()
        key_type = codec.read_uint32()
        p_cccd = common.RPC_T_LE_CCCD()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_gen_bond_dev(bd_addr, bd_type, local_bd_type, local_ltk, key_type, p_cccd)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_LE_GEN_BOND_DEV_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_rpc_le_get_dev_bond_info_len(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_get_dev_bond_info_len()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_LE_GET_DEV_BOND_INFO_LEN_ID,
            sequence=sequence))
        codec.write_uint16(_result)

    def _handle_rpc_le_set_dev_bond_info(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        exist = erpc.Reference()

        # Read incoming parameters.
        p_data = codec.read_binary()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_set_dev_bond_info(p_data, exist)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_LE_SET_DEV_BOND_INFO_ID,
            sequence=sequence))
        if exist.value is None:
            raise ValueError("exist is None")
        codec.write_bool(exist.value)
        _result._write(codec)

    def _handle_rpc_le_get_dev_bond_info(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        p_data = erpc.Reference()

        # Read incoming parameters.
        p_entry = common.RPC_T_LE_KEY_ENTRY()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_le_get_dev_bond_info(p_entry, p_data)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gap_storage.SERVICE_ID,
            request=interface.Irpc_gap_storage.RPC_LE_GET_DEV_BOND_INFO_ID,
            sequence=sequence))
        if p_data.value is None:
            raise ValueError("p_data is None")
        codec.write_binary(p_data.value)
        codec.write_bool(_result)


# Client for rpc_gatt_client
class rpc_gatt_clientService(erpc.server.Service):
    def __init__(self, handler):
        super(rpc_gatt_clientService, self).__init__(interface.Irpc_gatt_client.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.Irpc_gatt_client.RPC_BLE_CLIENT_INIT_ID: self._handle_rpc_ble_client_init,
                interface.Irpc_gatt_client.RPC_BLE_ADD_CLIENT_ID: self._handle_rpc_ble_add_client,
                interface.Irpc_gatt_client.RPC_CLIENT_INIT_ID: self._handle_rpc_client_init,
                interface.Irpc_gatt_client.RPC_CLIENT_ALL_PRIMARY_SRV_DISCOVERY_ID: self._handle_rpc_client_all_primary_srv_discovery,
                interface.Irpc_gatt_client.RPC_CLIENT_BY_UUID_SRV_DISCOVERY_ID: self._handle_rpc_client_by_uuid_srv_discovery,
                interface.Irpc_gatt_client.RPC_CLIENT_BY_UUID128_SRV_DISCOVERY_ID: self._handle_rpc_client_by_uuid128_srv_discovery,
                interface.Irpc_gatt_client.RPC_CLIENT_RELATIONSHIP_DISCOVERY_ID: self._handle_rpc_client_relationship_discovery,
                interface.Irpc_gatt_client.RPC_CLIENT_ALL_CHAR_DISCOVERY_ID: self._handle_rpc_client_all_char_discovery,
                interface.Irpc_gatt_client.RPC_CLIENT_BY_UUID_CHAR_DISCOVERY_ID: self._handle_rpc_client_by_uuid_char_discovery,
                interface.Irpc_gatt_client.RPC_CLIENT_BY_UUID128_CHAR_DISCOVERY_ID: self._handle_rpc_client_by_uuid128_char_discovery,
                interface.Irpc_gatt_client.RPC_CLIENT_ALL_CHAR_DESCRIPTOR_DISCOVERY_ID: self._handle_rpc_client_all_char_descriptor_discovery,
                interface.Irpc_gatt_client.RPC_CLIENT_ATTR_READ_ID: self._handle_rpc_client_attr_read,
                interface.Irpc_gatt_client.RPC_CLIENT_ATTR_READ_USING_UUID_ID: self._handle_rpc_client_attr_read_using_uuid,
                interface.Irpc_gatt_client.RPC_CLIENT_ATTR_WRITE_ID: self._handle_rpc_client_attr_write,
                interface.Irpc_gatt_client.RPC_CLIENT_ATTR_IND_CONFIRM_ID: self._handle_rpc_client_attr_ind_confirm,
            }

    def _handle_rpc_ble_client_init(self, sequence, codec):
        # Read incoming parameters.
        num = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_ble_client_init(num)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_client.SERVICE_ID,
            request=interface.Irpc_gatt_client.RPC_BLE_CLIENT_INIT_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_rpc_ble_add_client(self, sequence, codec):
        # Read incoming parameters.
        app_id = codec.read_uint8()
        link_num = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_ble_add_client(app_id, link_num)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_client.SERVICE_ID,
            request=interface.Irpc_gatt_client.RPC_BLE_ADD_CLIENT_ID,
            sequence=sequence))
        codec.write_uint8(_result)

    def _handle_rpc_client_init(self, sequence, codec):
        # Read incoming parameters.
        client_num = codec.read_uint8()

        # Invoke user implementation of remote function.
        self._handler.rpc_client_init(client_num)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_client.SERVICE_ID,
            request=interface.Irpc_gatt_client.RPC_CLIENT_INIT_ID,
            sequence=sequence))

    def _handle_rpc_client_all_primary_srv_discovery(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        client_id = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_client_all_primary_srv_discovery(conn_id, client_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_client.SERVICE_ID,
            request=interface.Irpc_gatt_client.RPC_CLIENT_ALL_PRIMARY_SRV_DISCOVERY_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_client_by_uuid_srv_discovery(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        client_id = codec.read_uint8()
        uuid16 = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_client_by_uuid_srv_discovery(conn_id, client_id, uuid16)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_client.SERVICE_ID,
            request=interface.Irpc_gatt_client.RPC_CLIENT_BY_UUID_SRV_DISCOVERY_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_client_by_uuid128_srv_discovery(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        client_id = codec.read_uint8()
        p_uuid128 = []
        for _i0 in range(16):
            _v0 = codec.read_uint8()
            p_uuid128.append(_v0)


        # Invoke user implementation of remote function.
        _result = self._handler.rpc_client_by_uuid128_srv_discovery(conn_id, client_id, p_uuid128)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_client.SERVICE_ID,
            request=interface.Irpc_gatt_client.RPC_CLIENT_BY_UUID128_SRV_DISCOVERY_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_client_relationship_discovery(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        client_id = codec.read_uint8()
        start_handle = codec.read_uint16()
        end_handle = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_client_relationship_discovery(conn_id, client_id, start_handle, end_handle)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_client.SERVICE_ID,
            request=interface.Irpc_gatt_client.RPC_CLIENT_RELATIONSHIP_DISCOVERY_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_client_all_char_discovery(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        client_id = codec.read_uint8()
        start_handle = codec.read_uint16()
        end_handle = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_client_all_char_discovery(conn_id, client_id, start_handle, end_handle)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_client.SERVICE_ID,
            request=interface.Irpc_gatt_client.RPC_CLIENT_ALL_CHAR_DISCOVERY_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_client_by_uuid_char_discovery(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        client_id = codec.read_uint8()
        start_handle = codec.read_uint16()
        end_handle = codec.read_uint16()
        uuid16 = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_client_by_uuid_char_discovery(conn_id, client_id, start_handle, end_handle, uuid16)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_client.SERVICE_ID,
            request=interface.Irpc_gatt_client.RPC_CLIENT_BY_UUID_CHAR_DISCOVERY_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_client_by_uuid128_char_discovery(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        client_id = codec.read_uint8()
        start_handle = codec.read_uint16()
        end_handle = codec.read_uint16()
        p_uuid128 = []
        for _i0 in range(16):
            _v0 = codec.read_uint8()
            p_uuid128.append(_v0)


        # Invoke user implementation of remote function.
        _result = self._handler.rpc_client_by_uuid128_char_discovery(conn_id, client_id, start_handle, end_handle, p_uuid128)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_client.SERVICE_ID,
            request=interface.Irpc_gatt_client.RPC_CLIENT_BY_UUID128_CHAR_DISCOVERY_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_client_all_char_descriptor_discovery(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        client_id = codec.read_uint8()
        start_handle = codec.read_uint16()
        end_handle = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_client_all_char_descriptor_discovery(conn_id, client_id, start_handle, end_handle)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_client.SERVICE_ID,
            request=interface.Irpc_gatt_client.RPC_CLIENT_ALL_CHAR_DESCRIPTOR_DISCOVERY_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_client_attr_read(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        client_id = codec.read_uint8()
        handle = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_client_attr_read(conn_id, client_id, handle)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_client.SERVICE_ID,
            request=interface.Irpc_gatt_client.RPC_CLIENT_ATTR_READ_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_client_attr_read_using_uuid(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        client_id = codec.read_uint8()
        start_handle = codec.read_uint16()
        end_handle = codec.read_uint16()
        uuid16 = codec.read_uint16()
        p_uuid128 = []
        for _i0 in range(16):
            _v0 = codec.read_uint8()
            p_uuid128.append(_v0)


        # Invoke user implementation of remote function.
        _result = self._handler.rpc_client_attr_read_using_uuid(conn_id, client_id, start_handle, end_handle, uuid16, p_uuid128)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_client.SERVICE_ID,
            request=interface.Irpc_gatt_client.RPC_CLIENT_ATTR_READ_USING_UUID_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_client_attr_write(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        client_id = codec.read_uint8()
        write_type = codec.read_uint32()
        handle = codec.read_uint16()
        data = codec.read_binary()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_client_attr_write(conn_id, client_id, write_type, handle, data)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_client.SERVICE_ID,
            request=interface.Irpc_gatt_client.RPC_CLIENT_ATTR_WRITE_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_client_attr_ind_confirm(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_client_attr_ind_confirm(conn_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_client.SERVICE_ID,
            request=interface.Irpc_gatt_client.RPC_CLIENT_ATTR_IND_CONFIRM_ID,
            sequence=sequence))
        codec.write_uint32(_result)


# Client for rpc_gatt_server
class rpc_gatt_serverService(erpc.server.Service):
    def __init__(self, handler):
        super(rpc_gatt_serverService, self).__init__(interface.Irpc_gatt_server.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.Irpc_gatt_server.RPC_BLE_SERVER_INIT_ID: self._handle_rpc_ble_server_init,
                interface.Irpc_gatt_server.RPC_BLE_CREATE_SERVICE_ID: self._handle_rpc_ble_create_service,
                interface.Irpc_gatt_server.RPC_BLE_DELETE_SERVICE_ID: self._handle_rpc_ble_delete_service,
                interface.Irpc_gatt_server.RPC_BLE_SERVICE_START_ID: self._handle_rpc_ble_service_start,
                interface.Irpc_gatt_server.RPC_BLE_GET_SERVIE_HANDLE_ID: self._handle_rpc_ble_get_servie_handle,
                interface.Irpc_gatt_server.RPC_BLE_CREATE_CHAR_ID: self._handle_rpc_ble_create_char,
                interface.Irpc_gatt_server.RPC_BLE_CREATE_DESC_ID: self._handle_rpc_ble_create_desc,
                interface.Irpc_gatt_server.RPC_SERVER_SEND_DATA_ID: self._handle_rpc_server_send_data,
                interface.Irpc_gatt_server.RPC_BLE_SERVER_GET_ATTR_VALUE_ID: self._handle_rpc_ble_server_get_attr_value,
                interface.Irpc_gatt_server.RPC_SERVER_EXEC_WRITE_CONFIRM_ID: self._handle_rpc_server_exec_write_confirm,
                interface.Irpc_gatt_server.RPC_SERVER_ATTR_WRITE_CONFIRM_ID: self._handle_rpc_server_attr_write_confirm,
                interface.Irpc_gatt_server.RPC_SERVER_ATTR_READ_CONFIRM_ID: self._handle_rpc_server_attr_read_confirm,
            }

    def _handle_rpc_ble_server_init(self, sequence, codec):
        # Read incoming parameters.
        num = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_ble_server_init(num)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_server.SERVICE_ID,
            request=interface.Irpc_gatt_server.RPC_BLE_SERVER_INIT_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_rpc_ble_create_service(self, sequence, codec):
        # Read incoming parameters.
        uuid = []
        for _i0 in range(16):
            _v0 = codec.read_uint8()
            uuid.append(_v0)

        uuid_length = codec.read_uint8()
        is_primary = codec.read_bool()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_ble_create_service(uuid, uuid_length, is_primary)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_server.SERVICE_ID,
            request=interface.Irpc_gatt_server.RPC_BLE_CREATE_SERVICE_ID,
            sequence=sequence))
        codec.write_uint8(_result)

    def _handle_rpc_ble_delete_service(self, sequence, codec):
        # Read incoming parameters.
        app_id = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_ble_delete_service(app_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_server.SERVICE_ID,
            request=interface.Irpc_gatt_server.RPC_BLE_DELETE_SERVICE_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_rpc_ble_service_start(self, sequence, codec):
        # Read incoming parameters.
        app_id = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_ble_service_start(app_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_server.SERVICE_ID,
            request=interface.Irpc_gatt_server.RPC_BLE_SERVICE_START_ID,
            sequence=sequence))
        codec.write_uint8(_result)

    def _handle_rpc_ble_get_servie_handle(self, sequence, codec):
        # Read incoming parameters.
        app_id = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_ble_get_servie_handle(app_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_server.SERVICE_ID,
            request=interface.Irpc_gatt_server.RPC_BLE_GET_SERVIE_HANDLE_ID,
            sequence=sequence))
        codec.write_uint8(_result)

    def _handle_rpc_ble_create_char(self, sequence, codec):
        # Read incoming parameters.
        app_id = codec.read_uint8()
        uuid = []
        for _i0 in range(16):
            _v0 = codec.read_uint8()
            uuid.append(_v0)

        uuid_length = codec.read_uint8()
        properties = codec.read_uint8()
        permissions = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_ble_create_char(app_id, uuid, uuid_length, properties, permissions)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_server.SERVICE_ID,
            request=interface.Irpc_gatt_server.RPC_BLE_CREATE_CHAR_ID,
            sequence=sequence))
        codec.write_uint16(_result)

    def _handle_rpc_ble_create_desc(self, sequence, codec):
        # Read incoming parameters.
        app_id = codec.read_uint8()
        char_handle = codec.read_uint16()
        uuid = []
        for _i0 in range(16):
            _v0 = codec.read_uint8()
            uuid.append(_v0)

        uuid_length = codec.read_uint8()
        flags = codec.read_uint8()
        permissions = codec.read_uint32()
        value_length = codec.read_uint16()
        p_value = codec.read_binary()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_ble_create_desc(app_id, char_handle, uuid, uuid_length, flags, permissions, value_length, p_value)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_server.SERVICE_ID,
            request=interface.Irpc_gatt_server.RPC_BLE_CREATE_DESC_ID,
            sequence=sequence))
        codec.write_uint16(_result)

    def _handle_rpc_server_send_data(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        service_id = codec.read_uint8()
        attrib_index = codec.read_uint16()
        data = codec.read_binary()
        pdu_type = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_server_send_data(conn_id, service_id, attrib_index, data, pdu_type)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_server.SERVICE_ID,
            request=interface.Irpc_gatt_server.RPC_SERVER_SEND_DATA_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_rpc_ble_server_get_attr_value(self, sequence, codec):
        # Read incoming parameters.
        app_id = codec.read_uint8()
        attr_handle = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_ble_server_get_attr_value(app_id, attr_handle)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_server.SERVICE_ID,
            request=interface.Irpc_gatt_server.RPC_BLE_SERVER_GET_ATTR_VALUE_ID,
            sequence=sequence))
        codec.write_binary(_result)

    def _handle_rpc_server_exec_write_confirm(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        cause = codec.read_uint16()
        handle = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_server_exec_write_confirm(conn_id, cause, handle)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_server.SERVICE_ID,
            request=interface.Irpc_gatt_server.RPC_SERVER_EXEC_WRITE_CONFIRM_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_rpc_server_attr_write_confirm(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        service_id = codec.read_uint8()
        attrib_index = codec.read_uint16()
        cause = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_server_attr_write_confirm(conn_id, service_id, attrib_index, cause)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_server.SERVICE_ID,
            request=interface.Irpc_gatt_server.RPC_SERVER_ATTR_WRITE_CONFIRM_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_rpc_server_attr_read_confirm(self, sequence, codec):
        # Read incoming parameters.
        conn_id = codec.read_uint8()
        service_id = codec.read_uint8()
        attrib_index = codec.read_uint16()
        data = codec.read_binary()
        cause = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_server_attr_read_confirm(conn_id, service_id, attrib_index, data, cause)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_gatt_server.SERVICE_ID,
            request=interface.Irpc_gatt_server.RPC_SERVER_ATTR_READ_CONFIRM_ID,
            sequence=sequence))
        codec.write_bool(_result)


