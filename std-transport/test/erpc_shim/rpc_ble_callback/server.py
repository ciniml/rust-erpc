#
# Generated by erpcgen 1.8.0 on Thu Oct 22 01:33:52 2020.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for rpc_ble_callback
class rpc_ble_callbackService(erpc.server.Service):
    def __init__(self, handler):
        super(rpc_ble_callbackService, self).__init__(interface.Irpc_ble_callback.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.Irpc_ble_callback.RPC_BLE_HANDLE_GAP_MSG_ID: self._handle_rpc_ble_handle_gap_msg,
                interface.Irpc_ble_callback.RPC_BLE_GAP_CALLBACK_ID: self._handle_rpc_ble_gap_callback,
                interface.Irpc_ble_callback.RPC_BLE_GATTC_CALLBACK_ID: self._handle_rpc_ble_gattc_callback,
                interface.Irpc_ble_callback.RPC_BLE_GATTS_CALLBACK_ID: self._handle_rpc_ble_gatts_callback,
            }

    def _handle_rpc_ble_handle_gap_msg(self, sequence, codec):
        # Read incoming parameters.
        gap_msg = codec.read_binary()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_ble_handle_gap_msg(gap_msg)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_ble_callback.SERVICE_ID,
            request=interface.Irpc_ble_callback.RPC_BLE_HANDLE_GAP_MSG_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_ble_gap_callback(self, sequence, codec):
        # Read incoming parameters.
        cb_type = codec.read_uint8()
        cb_data = codec.read_binary()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_ble_gap_callback(cb_type, cb_data)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_ble_callback.SERVICE_ID,
            request=interface.Irpc_ble_callback.RPC_BLE_GAP_CALLBACK_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_ble_gattc_callback(self, sequence, codec):
        # Read incoming parameters.
        gatt_if = codec.read_uint8()
        conn_id = codec.read_uint8()
        cb_data = codec.read_binary()
        extra_data = codec.read_binary()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_ble_gattc_callback(gatt_if, conn_id, cb_data, extra_data)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_ble_callback.SERVICE_ID,
            request=interface.Irpc_ble_callback.RPC_BLE_GATTC_CALLBACK_ID,
            sequence=sequence))
        codec.write_uint32(_result)

    def _handle_rpc_ble_gatts_callback(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        read_cb_data = erpc.Reference()

        # Read incoming parameters.
        gatt_if = codec.read_uint8()
        conn_id = codec.read_uint8()
        attrib_index = codec.read_uint16()
        event = codec.read_uint32()
        property = codec.read_uint16()
        write_cb_data = codec.read_binary()
        app_cb_data = codec.read_binary()

        # Invoke user implementation of remote function.
        _result = self._handler.rpc_ble_gatts_callback(gatt_if, conn_id, attrib_index, event, property, read_cb_data, write_cb_data, app_cb_data)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.Irpc_ble_callback.SERVICE_ID,
            request=interface.Irpc_ble_callback.RPC_BLE_GATTS_CALLBACK_ID,
            sequence=sequence))
        if read_cb_data.value is None:
            raise ValueError("read_cb_data is None")
        codec.write_binary(read_cb_data.value)
        codec.write_uint32(_result)


